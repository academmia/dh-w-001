{"version":3,"file":"TradingView-mh6EJ0Vw.js","sources":["../../src/components/ftbot/PairLockList.vue","../../src/components/ftbot/PeriodBreakdown.vue","../../src/components/ftbot/BotPerformance.vue","../../src/components/ftbot/BotProfit.vue","../../src/components/ftbot/BotStatus.vue","../../src/components/ftbot/ForceEntryForm.vue","../../src/components/ftbot/BotControls.vue","../../src/views/TradingView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"mb-2\">\r\n      <label class=\"me-auto h3\">Pair Locks</label>\r\n      <b-button class=\"float-end\" size=\"sm\" @click=\"botStore.activeBot.getLocks\">\r\n        <i-mdi-refresh />\r\n      </b-button>\r\n    </div>\r\n    <div>\r\n      <b-table class=\"table-sm\" :items=\"botStore.activeBot.activeLocks\" :fields=\"tableFields\">\r\n        <template #cell(actions)=\"row\">\r\n          <b-button\r\n            class=\"btn-xs ms-1\"\r\n            size=\"sm\"\r\n            title=\"Delete trade\"\r\n            @click=\"removePairLock(row.item as unknown as Lock)\"\r\n          >\r\n            <i-mdi-delete />\r\n          </b-button>\r\n        </template>\r\n      </b-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { timestampms } from '@/shared/formatters';\r\nimport { Lock } from '@/types';\r\n\r\nimport { showAlert } from '@/shared/alerts';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { TableField } from 'bootstrap-vue-next';\r\nconst botStore = useBotStore();\r\n\r\nconst tableFields: TableField[] = [\r\n  { key: 'pair', label: 'Pair' },\r\n  { key: 'lock_end_timestamp', label: 'Until', formatter: (value) => timestampms(value as number) },\r\n  { key: 'reason', label: 'Reason' },\r\n  { key: 'actions' },\r\n];\r\n\r\nconst removePairLock = (item: Lock) => {\r\n  console.log(item);\r\n  if (item.id !== undefined) {\r\n    botStore.activeBot.deleteLock(item.id);\r\n  } else {\r\n    showAlert('This Freqtrade version does not support deleting locks.');\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n","<template>\r\n  <div>\r\n    <div class=\"mb-2\">\r\n      <h3 class=\"me-auto d-inline\">{{ hasWeekly ? 'Period' : 'Daily' }} Breakdown</h3>\r\n      <b-button class=\"float-end\" size=\"sm\" @click=\"refreshSummary\">\r\n        <i-mdi-refresh />\r\n      </b-button>\r\n    </div>\r\n    <b-form-radio-group\r\n      v-if=\"hasWeekly\"\r\n      id=\"order-direction\"\r\n      v-model=\"periodicBreakdownPeriod\"\r\n      :options=\"periodicBreakdownSelections\"\r\n      name=\"radios-btn-default\"\r\n      size=\"sm\"\r\n      buttons\r\n      style=\"min-width: 10em\"\r\n      button-variant=\"outline-primary\"\r\n      @change=\"refreshSummary\"\r\n    ></b-form-radio-group>\r\n\r\n    <div class=\"ps-1\">\r\n      <TimePeriodChart\r\n        v-if=\"selectedStats\"\r\n        :daily-stats=\"selectedStatsSorted\"\r\n        :show-title=\"false\"\r\n      />\r\n    </div>\r\n    <div>\r\n      <b-table class=\"table-sm\" :items=\"selectedStats.data\" :fields=\"dailyFields\"> </b-table>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { formatPercent, formatPrice } from '@/shared/formatters';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { TableField } from 'bootstrap-vue-next';\r\n\r\nimport { TimeSummaryOptions } from '@/types';\r\n\r\nconst botStore = useBotStore();\r\n\r\nconst hasWeekly = computed(() => botStore.activeBot.botApiVersion >= 2.33);\r\n\r\nconst periodicBreakdownSelections = computed(() => {\r\n  const vals = [{ value: TimeSummaryOptions.daily, text: 'Days' }];\r\n  if (hasWeekly.value) {\r\n    vals.push({ value: TimeSummaryOptions.weekly, text: 'Weeks' });\r\n    vals.push({ value: TimeSummaryOptions.monthly, text: 'Months' });\r\n  }\r\n  return vals;\r\n});\r\nconst periodicBreakdownPeriod = ref<TimeSummaryOptions>(TimeSummaryOptions.daily);\r\n\r\nconst selectedStats = computed(() => {\r\n  switch (periodicBreakdownPeriod.value) {\r\n    case TimeSummaryOptions.weekly:\r\n      return botStore.activeBot.weeklyStats;\r\n    case TimeSummaryOptions.monthly:\r\n      return botStore.activeBot.monthlyStats;\r\n  }\r\n  return botStore.activeBot.dailyStats;\r\n});\r\n\r\nconst selectedStatsSorted = computed(() => {\r\n  // Sorted version for chart\r\n  return {\r\n    ...selectedStats.value,\r\n    data: selectedStats.value.data\r\n      ? Object.values(selectedStats.value.data).sort((a, b) => (a.date > b.date ? 1 : -1))\r\n      : [],\r\n  };\r\n});\r\n\r\nconst dailyFields = computed<TableField[]>(() => {\r\n  const res: TableField[] = [\r\n    { key: 'date', label: 'Day' },\r\n    {\r\n      key: 'abs_profit',\r\n      label: 'Profit',\r\n      formatter: (value: unknown) =>\r\n        formatPrice(value as number, botStore.activeBot.stakeCurrencyDecimals),\r\n    },\r\n    {\r\n      key: 'fiat_value',\r\n      label: `In ${botStore.activeBot.dailyStats.fiat_display_currency}`,\r\n      formatter: (value: unknown) => formatPrice(value as number, 2),\r\n    },\r\n    { key: 'trade_count', label: 'Trades' },\r\n  ];\r\n  if (botStore.activeBot.botApiVersion >= 2.16)\r\n    res.push({\r\n      key: 'rel_profit',\r\n      label: 'Profit%',\r\n      formatter: (value: unknown) => formatPercent(value as number, 2),\r\n    });\r\n  return res;\r\n});\r\n\r\nfunction refreshSummary() {\r\n  botStore.activeBot.getTimeSummary(periodicBreakdownPeriod.value);\r\n}\r\n\r\nonMounted(() => {\r\n  refreshSummary();\r\n});\r\n</script>\r\n","<script setup lang=\"ts\">\r\nimport { formatPrice } from '@/shared/formatters';\r\n\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { TableField } from 'bootstrap-vue-next';\r\n\r\nconst botStore = useBotStore();\r\nenum PerformanceOptions {\r\n  performance = 'performance',\r\n  entryStats = 'entryStats',\r\n  exitStats = 'exitStats',\r\n  mixTagStats = 'mixTagStats',\r\n}\r\nconst selectedOption = ref<PerformanceOptions>(PerformanceOptions.performance);\r\n\r\nfunction formatTextLen(text: string, len: number) {\r\n  if (text.length > len) {\r\n    return text.substring(0, len) + '...';\r\n  }\r\n  return text;\r\n}\r\n\r\nconst performanceTable = computed<TableField[]>(() => {\r\n  const textLength = 17;\r\n  const initialCol = {\r\n    [PerformanceOptions.performance]: { key: 'pair', label: 'Pair' },\r\n    [PerformanceOptions.entryStats]: {\r\n      key: 'enter_tag',\r\n      label: 'Enter tag',\r\n      formatter: (v: unknown) => formatTextLen(v as string, textLength),\r\n    },\r\n    [PerformanceOptions.exitStats]: {\r\n      key: 'exit_reason',\r\n      label: 'Exit Reason',\r\n      formatter: (v: unknown) => formatTextLen(v as string, textLength),\r\n    },\r\n    [PerformanceOptions.mixTagStats]: {\r\n      key: 'mix_tag',\r\n      label: 'Mix Tag',\r\n      formatter: (v: unknown) => formatTextLen(v as string, textLength),\r\n    },\r\n  };\r\n  return [\r\n    initialCol[selectedOption.value],\r\n    { key: 'profit', label: 'Profit %' },\r\n    {\r\n      key: 'profit_abs',\r\n      label: `Profit ${botStore.activeBot.botState?.stake_currency}`,\r\n      formatter: (v: unknown) => formatPrice(v as number, 5),\r\n    },\r\n    { key: 'count', label: 'Count' },\r\n  ];\r\n});\r\n\r\nconst performanceData = computed(() => {\r\n  if (selectedOption.value === PerformanceOptions.performance) {\r\n    return botStore.activeBot.performanceStats;\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.entryStats) {\r\n    return botStore.activeBot.entryStats;\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.exitStats) {\r\n    return botStore.activeBot.exitStats;\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.mixTagStats) {\r\n    return botStore.activeBot.mixTagStats;\r\n  }\r\n  return [];\r\n});\r\n\r\nconst hasAdvancedStats = computed(() => botStore.activeBot.botApiVersion >= 2.34);\r\n\r\nconst options = [\r\n  { value: PerformanceOptions.performance, text: 'Performance' },\r\n  { value: PerformanceOptions.entryStats, text: 'Entries' },\r\n  { value: PerformanceOptions.exitStats, text: 'Exits' },\r\n  { value: PerformanceOptions.mixTagStats, text: 'Mix Tag' },\r\n];\r\n\r\nfunction refreshSummary() {\r\n  if (selectedOption.value === PerformanceOptions.performance) {\r\n    botStore.activeBot.getPerformance();\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.entryStats) {\r\n    botStore.activeBot.getEntryStats();\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.exitStats) {\r\n    botStore.activeBot.getExitStats();\r\n  }\r\n  if (selectedOption.value === PerformanceOptions.mixTagStats) {\r\n    botStore.activeBot.getMixTagStats();\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  refreshSummary();\r\n});\r\n</script>\r\n<template>\r\n  <div>\r\n    <div class=\"mb-2\">\r\n      <h3 class=\"me-auto d-inline\">Performance</h3>\r\n      <b-button class=\"float-end\" size=\"sm\" @click=\"refreshSummary\">\r\n        <i-mdi-refresh />\r\n      </b-button>\r\n    </div>\r\n    <b-form-radio-group\r\n      v-if=\"hasAdvancedStats\"\r\n      id=\"order-direction\"\r\n      v-model=\"selectedOption\"\r\n      :options=\"options\"\r\n      name=\"radios-btn-default\"\r\n      size=\"sm\"\r\n      buttons\r\n      style=\"min-width: 10em\"\r\n      button-variant=\"outline-primary\"\r\n      @change=\"refreshSummary\"\r\n    ></b-form-radio-group>\r\n    <b-table class=\"table-sm\" :items=\"performanceData\" :fields=\"performanceTable\"></b-table>\r\n  </div>\r\n</template>\r\n","<template>\r\n  <b-table class=\"text-start\" small borderless :items=\"profitItems\" :fields=\"profitFields\">\r\n    <template #cell(value)=\"row\">\r\n      <DateTimeTZ v-if=\"row.item.isTs && row.value\" :date=\"row.value as number\"></DateTimeTZ>\r\n      <template v-else>{{ row.value }}</template>\r\n    </template>\r\n  </b-table>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { formatPercent, formatPriceCurrency, timestampms } from '@/shared/formatters';\r\n\r\nimport { ProfitInterface } from '@/types';\r\nimport { TableField, TableItem } from 'bootstrap-vue-next';\r\n\r\nconst props = defineProps({\r\n  profit: { required: true, type: Object as () => ProfitInterface },\r\n  stakeCurrency: { required: true, type: String },\r\n  stakeCurrencyDecimals: { required: true, type: Number },\r\n});\r\n\r\nconst profitFields: TableField[] = [\r\n  { key: 'metric', label: 'Metric' },\r\n  { key: 'value', label: 'Value' },\r\n];\r\n\r\nconst profitItems = computed<TableItem[]>(() => {\r\n  if (!props.profit) return [];\r\n  return [\r\n    {\r\n      metric: 'ROI open trades',\r\n      value: props.profit.profit_closed_coin\r\n        ? `${formatPriceCurrency(\r\n            props.profit.profit_closed_coin,\r\n            props.stakeCurrency,\r\n            props.stakeCurrencyDecimals,\r\n          )} (${formatPercent(props.profit.profit_closed_ratio_mean, 2)})`\r\n        : 'N/A',\r\n      // (&sum; ${formatPercent(props.profit.profit_closed_ratio_sum,  2,)})`\r\n    },\r\n    {\r\n      metric: 'ROI all trades',\r\n      value: props.profit.profit_all_coin\r\n        ? `${formatPriceCurrency(\r\n            props.profit.profit_all_coin,\r\n            props.stakeCurrency,\r\n            props.stakeCurrencyDecimals,\r\n          )} (${formatPercent(props.profit.profit_all_ratio_mean, 2)})`\r\n        : 'N/A',\r\n      //  (&sum; ${formatPercent(props.profit.profit_all_ratio_sum,2,)})`\r\n    },\r\n\r\n    {\r\n      metric: 'Total Trade count',\r\n      value: `${props.profit.trade_count ?? 0}`,\r\n    },\r\n    {\r\n      metric: 'Bot started',\r\n      value: props.profit.bot_start_timestamp,\r\n      isTs: true,\r\n    },\r\n    {\r\n      metric: 'First Trade opened',\r\n      value: props.profit.first_trade_timestamp,\r\n      isTs: true,\r\n    },\r\n    {\r\n      metric: 'Latest Trade opened',\r\n      value: props.profit.latest_trade_timestamp,\r\n      isTs: true,\r\n    },\r\n    {\r\n      metric: 'Win / Loss',\r\n      value: `${props.profit.winning_trades ?? 0} / ${props.profit.losing_trades ?? 0}`,\r\n    },\r\n    {\r\n      metric: 'Winrate',\r\n      value: `${props.profit.winrate ? formatPercent(props.profit.winrate) : 'N/A'}`,\r\n    },\r\n    {\r\n      metric: 'Expectancy (ratio)',\r\n      value: `${props.profit.expectancy ? props.profit.expectancy.toFixed(2) : 'N/A'} (${\r\n        props.profit.expectancy_ratio ? props.profit.expectancy_ratio.toFixed(2) : 'N/A'\r\n      })`,\r\n    },\r\n    {\r\n      metric: 'Avg. Duration',\r\n      value: `${props.profit.avg_duration ?? 'N/A'}`,\r\n    },\r\n    {\r\n      metric: 'Best performing',\r\n      value: props.profit.best_pair\r\n        ? `${props.profit.best_pair}: ${formatPercent(props.profit.best_pair_profit_ratio, 2)}`\r\n        : 'N/A',\r\n    },\r\n    {\r\n      metric: 'Trading volume',\r\n      value: `${formatPriceCurrency(\r\n        props.profit.trading_volume ?? 0,\r\n        props.stakeCurrency,\r\n        props.stakeCurrencyDecimals,\r\n      )}`,\r\n    },\r\n    {\r\n      metric: 'Profit factor',\r\n      value: `${props.profit.profit_factor ? props.profit.profit_factor.toFixed(2) : 'N/A'}`,\r\n    },\r\n    {\r\n      metric: 'Max Drawdown',\r\n      value: `${props.profit.max_drawdown ? formatPercent(props.profit.max_drawdown, 2) : 'N/A'} (${\r\n        props.profit.max_drawdown_abs\r\n          ? formatPriceCurrency(\r\n              props.profit.max_drawdown_abs,\r\n              props.stakeCurrency,\r\n              props.stakeCurrencyDecimals,\r\n            )\r\n          : 'N/A'\r\n      }) ${\r\n        props.profit.max_drawdown_start_timestamp && props.profit.max_drawdown_end_timestamp\r\n          ? 'from ' +\r\n            timestampms(props.profit.max_drawdown_start_timestamp) +\r\n            ' to ' +\r\n            timestampms(props.profit.max_drawdown_end_timestamp)\r\n          : ''\r\n      }`,\r\n    },\r\n  ];\r\n});\r\n</script>\r\n","<template>\r\n  <div v-if=\"botStore.activeBot.botState\">\r\n    <p>\r\n      Running Freqtrade <strong>{{ botStore.activeBot.version }}</strong>\r\n    </p>\r\n    <p>\r\n      Running with\r\n      <strong>\r\n        {{ botStore.activeBot.botState.max_open_trades }}x{{\r\n          botStore.activeBot.botState.stake_amount\r\n        }}\r\n        {{ botStore.activeBot.botState.stake_currency }}\r\n      </strong>\r\n      on\r\n      <strong>{{ botStore.activeBot.botState.exchange }}</strong> in\r\n      <strong>{{ botStore.activeBot.botState.trading_mode || 'spot' }}</strong> markets, with\r\n      Strategy <strong>{{ botStore.activeBot.botState.strategy }}</strong\r\n      >.\r\n    </p>\r\n    <p v-if=\"'stoploss_on_exchange' in botStore.activeBot.botState\">\r\n      Stoploss on exchange is\r\n      <strong>{{\r\n        botStore.activeBot.botState.stoploss_on_exchange ? 'enabled' : 'disabled'\r\n      }}</strong\r\n      >.\r\n    </p>\r\n    <p>\r\n      Currently <strong>{{ botStore.activeBot.botState.state }}</strong\r\n      >,\r\n      <strong>force entry: {{ botStore.activeBot.botState.force_entry_enable }}</strong>\r\n    </p>\r\n    <p>\r\n      <strong>{{ botStore.activeBot.botState.dry_run ? 'Dry-Run' : 'Live' }}</strong>\r\n    </p>\r\n    <hr />\r\n    <p>\r\n      Avg Profit {{ formatPercent(botStore.activeBot.profit.profit_all_ratio_mean) }} (&sum;\r\n      {{ formatPercent(botStore.activeBot.profit.profit_all_ratio_sum) }}) in\r\n      {{ botStore.activeBot.profit.trade_count }} Trades, with an average duration of\r\n      {{ botStore.activeBot.profit.avg_duration }}. Best pair:\r\n      {{ botStore.activeBot.profit.best_pair }}.\r\n    </p>\r\n    <p v-if=\"botStore.activeBot.profit.first_trade_timestamp\">\r\n      <span v-if=\"botStore.activeBot.profit.bot_start_timestamp\" class=\"d-block\">\r\n        Bot start date:\r\n        <strong>\r\n          <DateTimeTZ :date=\"botStore.activeBot.profit.bot_start_timestamp\" show-timezone />\r\n        </strong>\r\n      </span>\r\n      <span class=\"d-block\">\r\n        First trade opened:\r\n        <strong>\r\n          <DateTimeTZ :date=\"botStore.activeBot.profit.first_trade_timestamp\" show-timezone />\r\n        </strong>\r\n      </span>\r\n      <span class=\"d-block\">\r\n        Last trade opened:\r\n        <strong>\r\n          <DateTimeTZ :date=\"botStore.activeBot.profit.latest_trade_timestamp\" show-timezone />\r\n        </strong>\r\n      </span>\r\n    </p>\r\n    <p>\r\n      <span v-if=\"botStore.activeBot.profit.profit_factor\" class=\"d-block\">\r\n        Profit factor:\r\n        {{ botStore.activeBot.profit.profit_factor.toFixed(2) }}\r\n      </span>\r\n      <span v-if=\"botStore.activeBot.profit.trading_volume\" class=\"d-block\">\r\n        Trading volume:\r\n        {{\r\n          formatPriceCurrency(\r\n            botStore.activeBot.profit.trading_volume,\r\n            botStore.activeBot.botState.stake_currency,\r\n            botStore.activeBot.botState.stake_currency_decimals ?? 3,\r\n          )\r\n        }}\r\n      </span>\r\n    </p>\r\n    <BotProfit\r\n      class=\"mx-1\"\r\n      :profit=\"botStore.activeBot.profit\"\r\n      :stake-currency=\"botStore.activeBot.botState.stake_currency ?? 'USDT'\"\r\n      :stake-currency-decimals=\"botStore.activeBot.botState.stake_currency_decimals ?? 3\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { formatPercent, formatPriceCurrency } from '@/shared/formatters';\r\n\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst botStore = useBotStore();\r\n</script>\r\n","<template>\r\n  <b-modal\r\n    id=\"forceentry-modal\"\r\n    ref=\"modal\"\r\n    v-model=\"model\"\r\n    title=\"Force entering a trade\"\r\n    @show=\"resetForm\"\r\n    @hidden=\"resetForm\"\r\n    @ok=\"handleEntry\"\r\n  >\r\n    <form ref=\"form\" @submit.stop.prevent=\"handleSubmit\">\r\n      <b-form-group\r\n        v-if=\"botStore.activeBot.botApiVersion >= 2.13 && botStore.activeBot.shortAllowed\"\r\n        label=\"Order direction (Long or Short)\"\r\n        label-for=\"order-direction\"\r\n        invalid-feedback=\"Order direction must be set\"\r\n        :state=\"orderSide !== undefined\"\r\n      >\r\n        <b-form-radio-group\r\n          id=\"order-direction\"\r\n          v-model=\"orderSide\"\r\n          :options=\"orderSideOptions\"\r\n          name=\"radios-btn-default\"\r\n          size=\"sm\"\r\n          buttons\r\n          style=\"min-width: 10em\"\r\n          button-variant=\"outline-primary\"\r\n        ></b-form-radio-group>\r\n      </b-form-group>\r\n      <b-form-group\r\n        label=\"Pair\"\r\n        label-for=\"pair-input\"\r\n        invalid-feedback=\"Pair is required\"\r\n        :state=\"selectedPair !== undefined\"\r\n      >\r\n        <b-form-input\r\n          id=\"pair-input\"\r\n          v-model=\"selectedPair\"\r\n          required\r\n          @keydown.enter=\"handleEntry\"\r\n          @focus=\"inputSelect\"\r\n        ></b-form-input>\r\n      </b-form-group>\r\n      <b-form-group\r\n        label=\"*Price [optional]\"\r\n        label-for=\"price-input\"\r\n        invalid-feedback=\"Price must be empty or a positive number\"\r\n        :state=\"!price || price > 0\"\r\n      >\r\n        <b-form-input\r\n          id=\"price-input\"\r\n          v-model=\"price\"\r\n          type=\"number\"\r\n          step=\"0.00000001\"\r\n          @keydown.enter=\"handleEntry\"\r\n        ></b-form-input>\r\n      </b-form-group>\r\n      <b-form-group\r\n        :label=\"`*Stake-amount in ${botStore.activeBot.stakeCurrency} [optional]`\"\r\n        label-for=\"stake-input\"\r\n        invalid-feedback=\"Stake-amount must be empty or a positive number\"\r\n        :state=\"!stakeAmount || stakeAmount > 0\"\r\n      >\r\n        <b-form-input\r\n          id=\"stake-input\"\r\n          v-model=\"stakeAmount\"\r\n          type=\"number\"\r\n          step=\"0.000001\"\r\n          @keydown.enter=\"handleEntry\"\r\n        ></b-form-input>\r\n      </b-form-group>\r\n      <b-form-group\r\n        v-if=\"botStore.activeBot.botApiVersion > 2.16 && botStore.activeBot.shortAllowed\"\r\n        :label=\"`*Leverage to apply [optional]`\"\r\n        label-for=\"leverage-input\"\r\n        invalid-feedback=\"Leverage must be empty or a positive number\"\r\n        :state=\"!leverage || leverage > 0\"\r\n      >\r\n        <b-form-input\r\n          id=\"leverage-input\"\r\n          v-model=\"leverage\"\r\n          type=\"number\"\r\n          step=\"0.01\"\r\n          @keydown.enter=\"handleEntry\"\r\n        ></b-form-input>\r\n      </b-form-group>\r\n      <b-form-group\r\n        label=\"OrderType\"\r\n        label-for=\"ordertype-input\"\r\n        invalid-feedback=\"OrderType\"\r\n        :state=\"true\"\r\n      >\r\n        <b-form-radio-group\r\n          id=\"ordertype-input\"\r\n          v-model=\"ordertype\"\r\n          :options=\"orderTypeOptions\"\r\n          name=\"radios-btn-orderType\"\r\n          buttons\r\n          button-variant=\"outline-primary\"\r\n          style=\"min-width: 10em\"\r\n          size=\"sm\"\r\n        ></b-form-radio-group>\r\n      </b-form-group>\r\n      <b-form-group\r\n        v-if=\"botStore.activeBot.botApiVersion > 1.16\"\r\n        label=\"*Custom entry tag Optional]\"\r\n        label-for=\"enterTag-input\"\r\n      >\r\n        <b-form-input\r\n          id=\"enterTag-input\"\r\n          v-model=\"enterTag\"\r\n          type=\"text\"\r\n          name=\"radios-btn-orderType\"\r\n        ></b-form-input>\r\n      </b-form-group>\r\n    </form>\r\n  </b-modal>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { ForceEnterPayload, OrderSides } from '@/types';\r\n\r\nconst props = defineProps({\r\n  modelValue: { required: true, default: false, type: Boolean },\r\n  pair: { type: String, default: '' },\r\n});\r\nconst emit = defineEmits(['update:modelValue']);\r\nconst botStore = useBotStore();\r\n\r\nconst form = ref<HTMLFormElement>();\r\nconst selectedPair = ref('');\r\nconst price = ref<number | undefined>(undefined);\r\nconst stakeAmount = ref<number | undefined>(undefined);\r\nconst leverage = ref<number | undefined>(undefined);\r\n\r\nconst ordertype = ref('');\r\nconst orderSide = ref<OrderSides>(OrderSides.long);\r\nconst enterTag = ref('force_entry');\r\n\r\nconst orderTypeOptions = [\r\n  { value: 'market', text: 'Market' },\r\n  { value: 'limit', text: 'Limit' },\r\n];\r\nconst orderSideOptions = [\r\n  { value: 'long', text: 'Long' },\r\n  { value: 'short', text: 'Short' },\r\n];\r\n\r\nconst model = computed({\r\n  get() {\r\n    return props.modelValue;\r\n  },\r\n  set(value: boolean) {\r\n    emit('update:modelValue', value);\r\n  },\r\n});\r\n\r\nconst checkFormValidity = () => {\r\n  const valid = form.value?.checkValidity();\r\n\r\n  return valid;\r\n};\r\n\r\nconst handleSubmit = async () => {\r\n  // Exit when the form isn't valid\r\n  if (!checkFormValidity()) {\r\n    return;\r\n  }\r\n\r\n  // call forceentry\r\n  const payload: ForceEnterPayload = { pair: selectedPair.value };\r\n  if (price.value) {\r\n    payload.price = Number(price.value);\r\n  }\r\n  if (ordertype.value) {\r\n    payload.ordertype = ordertype.value;\r\n  }\r\n  if (stakeAmount.value) {\r\n    payload.stakeamount = stakeAmount.value;\r\n  }\r\n  if (botStore.activeBot.botApiVersion >= 2.13 && botStore.activeBot.shortAllowed) {\r\n    payload.side = orderSide.value;\r\n  }\r\n  if (botStore.activeBot.botApiVersion >= 2.16 && enterTag.value) {\r\n    payload.entry_tag = enterTag.value;\r\n  }\r\n\r\n  if (leverage.value) {\r\n    payload.leverage = leverage.value;\r\n  }\r\n  botStore.activeBot.forceentry(payload);\r\n  await nextTick();\r\n  emit('update:modelValue', false);\r\n};\r\nconst resetForm = () => {\r\n  console.log('resetForm');\r\n  selectedPair.value = props.pair;\r\n  price.value = undefined;\r\n  stakeAmount.value = undefined;\r\n  ordertype.value =\r\n    botStore.activeBot.botState?.order_types?.forcebuy ||\r\n    botStore.activeBot.botState?.order_types?.force_entry ||\r\n    botStore.activeBot.botState?.order_types?.buy ||\r\n    botStore.activeBot.botState?.order_types?.entry ||\r\n    'limit';\r\n};\r\n\r\nconst handleEntry = () => {\r\n  // Trigger submit handler\r\n  handleSubmit();\r\n};\r\nconst inputSelect = (bvModalEvt) => {\r\n  bvModalEvt.srcElement?.select();\r\n};\r\n</script>\r\n","forceexit\r\n<template>\r\n  <div>\r\n    <button\r\n      class=\"btn btn-secondary btn-sm ms-1\"\r\n      :disabled=\"!botStore.activeBot.isTrading || isRunning\"\r\n      title=\"Start Trading\"\r\n      @click=\"botStore.activeBot.startBot()\"\r\n    >\r\n      <i-mdi-play height=\"24\" width=\"24\" />\r\n    </button>\r\n    <button\r\n      class=\"btn btn-secondary btn-sm ms-1\"\r\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\r\n      title=\"Stop Trading - Also stops handling open trades.\"\r\n      @click=\"handleStopBot()\"\r\n    >\r\n      <i-mdi-stop height=\"24\" width=\"24\" />\r\n    </button>\r\n    <button\r\n      class=\"btn btn-secondary btn-sm ms-1\"\r\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\r\n      title=\"StopBuy - Stops buying, but still handles open trades\"\r\n      @click=\"handleStopBuy()\"\r\n    >\r\n      <i-mdi-pause height=\"24\" width=\"24\" />\r\n    </button>\r\n    <button\r\n      class=\"btn btn-secondary btn-sm ms-1\"\r\n      :disabled=\"!botStore.activeBot.isTrading\"\r\n      title=\"Reload Config - reloads configuration including strategy, resetting all settings changed on the fly.\"\r\n      @click=\"handleReloadConfig()\"\r\n    >\r\n      <i-mdi-reload height=\"24\" width=\"24\" />\r\n    </button>\r\n    <button\r\n      class=\"btn btn-secondary btn-sm ms-1\"\r\n      :disabled=\"!botStore.activeBot.isTrading\"\r\n      title=\"Force exit all\"\r\n      @click=\"handleForceExit()\"\r\n    >\r\n      <i-mdi-close-box-multiple height=\"24\" width=\"24\" />\r\n    </button>\r\n    <button\r\n      v-if=\"botStore.activeBot.botState && botStore.activeBot.botState.force_entry_enable\"\r\n      class=\"btn btn-secondary btn-sm ms-1\"\r\n      :disabled=\"!botStore.activeBot.isTrading || !isRunning\"\r\n      title=\"Force enter - Immediately enter a trade at an optional price. Exits are then handled according to strategy rules.\"\r\n      @click=\"forceEnter = true\"\r\n    >\r\n      <i-mdi-plus-box-multiple-outline style=\"font-size: 20px\" />\r\n    </button>\r\n    <button\r\n      v-if=\"botStore.activeBot.isWebserverMode && false\"\r\n      :disabled=\"botStore.activeBot.isTrading\"\r\n      class=\"btn btn-secondary btn-sm ms-1\"\r\n      title=\"Start Trading mode\"\r\n      @click=\"botStore.activeBot.startTrade()\"\r\n    >\r\n      <i-mdi-play class=\"fs-4\" />\r\n    </button>\r\n    <ForceEntryForm v-model=\"forceEnter\" :pair=\"botStore.activeBot.selectedPair\" />\r\n    <MessageBox ref=\"msgBox\" />\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport MessageBox, { MsgBoxObject } from '@/components/general/MessageBox.vue';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { ForceSellPayload } from '@/types';\r\n\r\nimport ForceEntryForm from './ForceEntryForm.vue';\r\n\r\nconst botStore = useBotStore();\r\nconst forceEnter = ref<boolean>(false);\r\nconst msgBox = ref<typeof MessageBox>();\r\n\r\nconst isRunning = computed((): boolean => {\r\n  return botStore.activeBot.botState?.state === 'running';\r\n});\r\n\r\nconst handleStopBot = () => {\r\n  const msg: MsgBoxObject = {\r\n    title: 'Stop Bot',\r\n    message: 'Stop the bot loop from running?',\r\n    accept: () => {\r\n      botStore.activeBot.stopBot();\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n};\r\n\r\nconst handleStopBuy = () => {\r\n  const msg: MsgBoxObject = {\r\n    title: 'Stop Buying',\r\n    message: 'Freqtrade will continue to handle open trades.',\r\n    accept: () => {\r\n      botStore.activeBot.stopBuy();\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n};\r\n\r\nconst handleReloadConfig = () => {\r\n  const msg: MsgBoxObject = {\r\n    title: 'Reload',\r\n    message: 'Reload configuration (including strategy)?',\r\n    accept: () => {\r\n      console.log('reload...');\r\n      botStore.activeBot.reloadConfig();\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n};\r\n\r\nconst handleForceExit = () => {\r\n  const msg: MsgBoxObject = {\r\n    title: 'ForceExit all',\r\n    message: 'Really forceexit ALL trades?',\r\n    accept: () => {\r\n      const payload: ForceSellPayload = {\r\n        tradeid: 'all',\r\n        // TODO: support ordertype (?)\r\n      };\r\n      botStore.activeBot.forceexit(payload);\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n};\r\n</script>\r\n","<template>\r\n  <grid-layout\r\n    class=\"h-100 w-100\"\r\n    :row-height=\"50\"\r\n    :layout=\"gridLayoutData\"\r\n    :vertical-compact=\"false\"\r\n    :margin=\"[5, 5]\"\r\n    :responsive-layouts=\"responsiveGridLayouts\"\r\n    :is-resizable=\"!isLayoutLocked\"\r\n    :is-draggable=\"!isLayoutLocked\"\r\n    :responsive=\"true\"\r\n    :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\r\n    :col-num=\"12\"\r\n    @update:breakpoint=\"breakpointChanged\"\r\n  >\r\n    <template #default=\"{ gridItemProps }\">\r\n      <grid-item\r\n        v-if=\"gridLayoutMultiPane.h != 0\"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutMultiPane.i\"\r\n        :x=\"gridLayoutMultiPane.x\"\r\n        :y=\"gridLayoutMultiPane.y\"\r\n        :w=\"gridLayoutMultiPane.w\"\r\n        :h=\"gridLayoutMultiPane.h\"\r\n        drag-allow-from=\".card-header\"\r\n      >\r\n        <DraggableContainer header=\"Multi Pane\">\r\n          <div class=\"mt-1 d-flex justify-content-center\">\r\n            <BotControls class=\"mt-1 mb-2\" />\r\n          </div>\r\n          <b-tabs content-class=\"mt-3\" class=\"mt-1\">\r\n            <b-tab title=\"Pairs combined\" active>\r\n              <PairSummary\r\n                :pairlist=\"botStore.activeBot.whitelist\"\r\n                :current-locks=\"botStore.activeBot.activeLocks\"\r\n                :trades=\"botStore.activeBot.openTrades\"\r\n              />\r\n            </b-tab>\r\n            <b-tab title=\"General\">\r\n              <BotStatus />\r\n            </b-tab>\r\n            <b-tab title=\"Performance\" lazy>\r\n              <BotPerformance />\r\n            </b-tab>\r\n            <b-tab title=\"Balance\" lazy>\r\n              <BotBalance />\r\n            </b-tab>\r\n            <b-tab title=\"Time Breakdown\" lazy>\r\n              <PeriodBreakdown />\r\n            </b-tab>\r\n\r\n            <b-tab title=\"Pairlist\" lazy>\r\n              <PairListLive />\r\n            </b-tab>\r\n            <b-tab title=\"Pair Locks\" lazy>\r\n              <PairLockList />\r\n            </b-tab>\r\n          </b-tabs>\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-if=\"gridLayoutOpenTrades.h != 0\"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutOpenTrades.i\"\r\n        :x=\"gridLayoutOpenTrades.x\"\r\n        :y=\"gridLayoutOpenTrades.y\"\r\n        :w=\"gridLayoutOpenTrades.w\"\r\n        :h=\"gridLayoutOpenTrades.h\"\r\n        drag-allow-from=\".card-header\"\r\n      >\r\n        <DraggableContainer header=\"Open Trades\">\r\n          <TradeList\r\n            class=\"open-trades\"\r\n            :trades=\"botStore.activeBot.openTrades\"\r\n            title=\"Open trades\"\r\n            :active-trades=\"true\"\r\n            empty-text=\"Currently no open trades.\"\r\n          />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-if=\"gridLayoutTradeHistory.h != 0\"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutTradeHistory.i\"\r\n        :x=\"gridLayoutTradeHistory.x\"\r\n        :y=\"gridLayoutTradeHistory.y\"\r\n        :w=\"gridLayoutTradeHistory.w\"\r\n        :h=\"gridLayoutTradeHistory.h\"\r\n        drag-allow-from=\".card-header\"\r\n      >\r\n        <DraggableContainer header=\"Closed Trades\">\r\n          <trade-list\r\n            class=\"trade-history\"\r\n            :trades=\"botStore.activeBot.closedTrades\"\r\n            title=\"Trade history\"\r\n            :show-filter=\"true\"\r\n            empty-text=\"No closed trades so far.\"\r\n          />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-if=\"\r\n          botStore.activeBot.detailTradeId &&\r\n          botStore.activeBot.tradeDetail &&\r\n          gridLayoutTradeDetail.h != 0\r\n        \"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutTradeDetail.i\"\r\n        :x=\"gridLayoutTradeDetail.x\"\r\n        :y=\"gridLayoutTradeDetail.y\"\r\n        :w=\"gridLayoutTradeDetail.w\"\r\n        :h=\"gridLayoutTradeDetail.h\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".card-header\"\r\n      >\r\n        <DraggableContainer header=\"Trade Detail\">\r\n          <TradeDetail\r\n            :trade=\"botStore.activeBot.tradeDetail\"\r\n            :stake-currency=\"botStore.activeBot.stakeCurrency\"\r\n          />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-if=\"gridLayoutTradeDetail.h != 0\"\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutChartView.i\"\r\n        :x=\"gridLayoutChartView.x\"\r\n        :y=\"gridLayoutChartView.y\"\r\n        :w=\"gridLayoutChartView.w\"\r\n        :h=\"gridLayoutChartView.h\"\r\n        :min-h=\"6\"\r\n        drag-allow-from=\".card-header\"\r\n      >\r\n        <DraggableContainer header=\"Chart\">\r\n          <CandleChartContainer\r\n            :available-pairs=\"botStore.activeBot.whitelist\"\r\n            :historic-view=\"!!false\"\r\n            :timeframe=\"botStore.activeBot.timeframe\"\r\n            :trades=\"botStore.activeBot.allTrades\"\r\n          >\r\n          </CandleChartContainer>\r\n        </DraggableContainer>\r\n      </grid-item>\r\n    </template>\r\n  </grid-layout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { GridItemData } from '@/types';\r\n\r\nimport { useLayoutStore, findGridLayout, TradeLayout } from '@/stores/layout';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst botStore = useBotStore();\r\nconst layoutStore = useLayoutStore();\r\nconst currentBreakpoint = ref('');\r\n\r\nconst breakpointChanged = (newBreakpoint: string) => {\r\n  // console.log('breakpoint:', newBreakpoint);\r\n  currentBreakpoint.value = newBreakpoint;\r\n};\r\nconst isResizableLayout = computed(() =>\r\n  ['', 'sm', 'md', 'lg', 'xl'].includes(currentBreakpoint.value),\r\n);\r\nconst isLayoutLocked = computed(() => {\r\n  return layoutStore.layoutLocked || !isResizableLayout.value;\r\n});\r\nconst gridLayoutData = computed((): GridItemData[] => {\r\n  if (isResizableLayout.value) {\r\n    return layoutStore.tradingLayout;\r\n  }\r\n  return [...layoutStore.getTradingLayoutSm];\r\n});\r\n\r\nconst gridLayoutMultiPane = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.multiPane);\r\n});\r\n\r\nconst gridLayoutOpenTrades = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.openTrades);\r\n});\r\n\r\nconst gridLayoutTradeHistory = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.tradeHistory);\r\n});\r\n\r\nconst gridLayoutTradeDetail = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.tradeDetail);\r\n});\r\n\r\nconst gridLayoutChartView = computed(() => {\r\n  return findGridLayout(gridLayoutData.value, TradeLayout.chartView);\r\n});\r\n\r\nconst responsiveGridLayouts = computed(() => {\r\n  return {\r\n    sm: layoutStore.getTradingLayoutSm,\r\n  };\r\n});\r\n</script>\r\n\r\n<style scoped></style>\r\n"],"names":["botStore","useBotStore","tableFields","value","timestampms","removePairLock","item","showAlert","hasWeekly","computed","periodicBreakdownSelections","vals","TimeSummaryOptions","periodicBreakdownPeriod","ref","selectedStats","selectedStatsSorted","a","b","dailyFields","res","formatPrice","formatPercent","refreshSummary","onMounted","selectedOption","formatTextLen","text","len","performanceTable","v","_a","performanceData","hasAdvancedStats","options","props","__props","profitFields","profitItems","formatPriceCurrency","emit","__emit","form","selectedPair","price","stakeAmount","leverage","ordertype","orderSide","OrderSides","enterTag","orderTypeOptions","orderSideOptions","model","checkFormValidity","handleSubmit","payload","nextTick","resetForm","_b","_d","_c","_f","_e","_h","_g","handleEntry","inputSelect","bvModalEvt","forceEnter","msgBox","isRunning","handleStopBot","msg","handleStopBuy","handleReloadConfig","handleForceExit","layoutStore","useLayoutStore","currentBreakpoint","breakpointChanged","newBreakpoint","isResizableLayout","isLayoutLocked","gridLayoutData","gridLayoutMultiPane","findGridLayout","TradeLayout","gridLayoutOpenTrades","gridLayoutTradeHistory","gridLayoutTradeDetail","gridLayoutChartView","responsiveGridLayouts"],"mappings":"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"}