{"version":3,"file":"TradesLogChart--qoNg82P.js","sources":["../../src/shared/charts/binCount.ts","../../src/components/charts/ProfitDistributionChart.vue","../../src/components/charts/CumProfitChart.vue","../../src/components/charts/TradesLogChart.vue"],"sourcesContent":["export function binData(data: number[], bins: number) {\r\n  const minimum = Math.min(...data);\r\n  const maximum = Math.max(...data);\r\n  const binSize = ((maximum - minimum) * 1.01) / bins;\r\n  // console.log(`data ranges from ${minimum} to ${maximum}, binsize ${binSize}`);\r\n  // Count occurances an array with [bucketStart, count in this bucket]\r\n  const baseBins = [...Array(bins).keys()].map((i) => [\r\n    Math.round((minimum + i * binSize) * 1000) / 1000,\r\n    0,\r\n  ]);\r\n\r\n  // console.log(baseBins);\r\n  for (let i = 0; i < data.length; i++) {\r\n    const index = Math.min(Math.floor((data[i] - minimum) / binSize), bins - 1);\r\n    if (!isNaN(index)) {\r\n      baseBins[index][1]++;\r\n    }\r\n  }\r\n\r\n  return baseBins;\r\n}\r\n","<template>\r\n  <div class=\"d-flex flex-column h-100 position-relative\">\r\n    <div class=\"flex-grow-1\">\r\n      <e-charts v-if=\"trades\" :option=\"chartOptions\" autoresize :theme=\"settingsStore.chartTheme\" />\r\n    </div>\r\n    <b-form-group\r\n      class=\"z-2\"\r\n      :class=\"showTitle ? 'ms-5 ps-5' : 'position-absolute'\"\r\n      label=\"Bins\"\r\n      style=\"width: 33%; min-width: 12rem\"\r\n      label-for=\"input-bins\"\r\n      label-cols=\"6\"\r\n      content-cols=\"6\"\r\n      size=\"sm\"\r\n    >\r\n      <b-form-select\r\n        id=\"input-bins\"\r\n        v-model=\"settingsStore.profitDistributionBins\"\r\n        size=\"sm\"\r\n        class=\"mt-1\"\r\n        :options=\"binOptions\"\r\n      ></b-form-select>\r\n    </b-form-group>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport ECharts from 'vue-echarts';\r\nimport { EChartsOption } from 'echarts';\r\n\r\nimport { use } from 'echarts/core';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { BarChart } from 'echarts/charts';\r\nimport {\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n} from 'echarts/components';\r\n\r\nimport { ClosedTrade } from '@/types';\r\nimport { binData } from '@/shared/charts/binCount';\r\nimport { useSettingsStore } from '@/stores/settings';\r\n\r\nuse([\r\n  BarChart,\r\n\r\n  CanvasRenderer,\r\n\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n]);\r\n\r\n// Define Column labels here to avoid typos\r\nconst CHART_PROFIT = 'Trade count';\r\n\r\nconst props = defineProps({\r\n  trades: { required: true, type: Array as () => ClosedTrade[] },\r\n  showTitle: { default: true, type: Boolean },\r\n});\r\nconst settingsStore = useSettingsStore();\r\n// registerTransform(ecStat.transform.histogram);\r\n// console.log(profits);\r\n// const data = [[]];\r\nconst binOptions = [10, 15, 20, 25, 50];\r\nconst data = computed(() => {\r\n  const profits = props.trades.map((trade) => trade.profit_ratio);\r\n\r\n  return binData(profits, settingsStore.profitDistributionBins);\r\n});\r\n\r\nconst chartOptions = computed((): EChartsOption => {\r\n  const chartOptionsLoc: EChartsOption = {\r\n    title: {\r\n      text: 'Profit distribution',\r\n      show: props.showTitle,\r\n    },\r\n    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n    dataset: {\r\n      source: data.value,\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      axisPointer: {\r\n        type: 'line',\r\n        label: {\r\n          backgroundColor: '#6a7985',\r\n        },\r\n      },\r\n    },\r\n    legend: {\r\n      data: [CHART_PROFIT],\r\n      right: '5%',\r\n      selectedMode: false,\r\n    },\r\n    xAxis: {\r\n      type: 'category',\r\n      name: 'Profit %',\r\n      nameLocation: 'middle',\r\n      nameGap: 25,\r\n    },\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n        name: CHART_PROFIT,\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        nameRotate: 90,\r\n        nameLocation: 'middle',\r\n        nameGap: 35,\r\n        position: 'left',\r\n      },\r\n    ],\r\n    // grid: {\r\n    // bottom: 80,\r\n    // },\r\n\r\n    series: [\r\n      {\r\n        type: 'bar',\r\n        name: CHART_PROFIT,\r\n        animation: true,\r\n        encode: {\r\n          x: 'x0',\r\n          y: 'y0',\r\n        },\r\n\r\n        // symbol: 'none',\r\n      },\r\n    ],\r\n  };\r\n  return chartOptionsLoc;\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.echarts {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 150px;\r\n}\r\n</style>\r\n","<template>\r\n  <e-charts v-if=\"trades\" ref=\"chart\" autoresize manual-update :theme=\"settingsStore.chartTheme\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { EChartsOption } from 'echarts';\r\nimport ECharts from 'vue-echarts';\r\n\r\nimport { BarChart, LineChart } from 'echarts/charts';\r\nimport {\r\n  DataZoomComponent,\r\n  DatasetComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n} from 'echarts/components';\r\nimport { use } from 'echarts/core';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\n\r\nimport { dataZoomPartial } from '@/shared/charts/chartZoom';\r\nimport { useSettingsStore } from '@/stores/settings';\r\nimport {\r\n  ClosedTrade,\r\n  CumProfitChartData,\r\n  CumProfitData,\r\n  CumProfitDataPerDate,\r\n  Trade,\r\n} from '@/types';\r\nimport { watchThrottled } from '@vueuse/core';\r\n\r\nimport { formatPrice, timestampToDateString } from '@/shared/formatters';\r\nimport { useColorStore } from '@/stores/colors';\r\n\r\nuse([\r\n  BarChart,\r\n  LineChart,\r\n\r\n  CanvasRenderer,\r\n\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n]);\r\n\r\n// Define Column labels here to avoid typos\r\nconst CHART_PROFIT = 'Profit';\r\n\r\nconst props = defineProps({\r\n  trades: { required: true, type: Array as () => ClosedTrade[] },\r\n  openTrades: { required: false, type: Array as () => Trade[], default: () => [] },\r\n  showTitle: { default: true, type: Boolean },\r\n  profitColumn: { default: 'profit_abs', type: String },\r\n});\r\nconst settingsStore = useSettingsStore();\r\nconst colorStore = useColorStore();\r\n// const botList = ref<string[]>([]);\r\n\r\nconst chart = ref<InstanceType<typeof ECharts>>();\r\n\r\nconst openProfit = computed<number>(() => {\r\n  return props.openTrades.reduce(\r\n    (a, v) => a + (v['total_profit_abs'] ?? v[props.profitColumn] ?? 0),\r\n    0,\r\n  );\r\n});\r\n\r\nconst cumulativeData = computed<CumProfitChartData[]>(() => {\r\n  const res: CumProfitData[] = [];\r\n  const resD: CumProfitDataPerDate = {};\r\n  const closedTrades = props.trades\r\n    .slice()\r\n    .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\r\n  let profit = 0.0;\r\n\r\n  for (let i = 0, len = closedTrades.length; i < len; i += 1) {\r\n    const trade = closedTrades[i];\r\n\r\n    if (trade.close_timestamp && trade[props.profitColumn]) {\r\n      profit += trade[props.profitColumn];\r\n      if (!resD[trade.close_timestamp]) {\r\n        // New timestamp\r\n        resD[trade.close_timestamp] = { profit, [trade.botId]: profit };\r\n      } else {\r\n        // Add to existing profit\r\n        resD[trade.close_timestamp].profit += trade[props.profitColumn];\r\n        if (resD[trade.close_timestamp][trade.botId]) {\r\n          resD[trade.close_timestamp][trade.botId] += trade[props.profitColumn];\r\n        } else {\r\n          resD[trade.close_timestamp][trade.botId] = profit;\r\n        }\r\n      }\r\n      res.push({ date: trade.close_timestamp, profit, [trade.botId]: profit });\r\n    }\r\n  }\r\n\r\n  const valueArray: CumProfitChartData[] = Object.entries(resD).map(\r\n    ([k, v]: [string, CumProfitData]) => {\r\n      const obj = { date: parseInt(k, 10), profit: v.profit };\r\n      // TODO: The below could allow \"lines\" per bot\"\r\n      // this.botList.forEach((botId) => {\r\n      // obj[botId] = v[botId];\r\n      // });\r\n      return obj;\r\n    },\r\n  );\r\n\r\n  if (props.openTrades.length > 0) {\r\n    let lastProfit = 0;\r\n    let lastDate = 0;\r\n    if (valueArray.length > 0) {\r\n      const lastPoint = valueArray[valueArray.length - 1];\r\n      lastProfit = lastPoint.profit ?? 0;\r\n      lastDate = lastPoint.date ?? 0;\r\n    } else {\r\n      lastDate = props.openTrades[0].open_timestamp;\r\n    }\r\n    const resultWitHOpen = (lastProfit ?? 0) + openProfit.value;\r\n    valueArray.push({ date: lastDate, currentProfit: lastProfit });\r\n    // Add one day to date to ensure it's showing properly\r\n    const tomorrow = Date.now() + 24 * 60 * 60 * 1000;\r\n    valueArray.push({ date: tomorrow, currentProfit: resultWitHOpen });\r\n  }\r\n  return valueArray;\r\n});\r\n\r\nfunction generateChart(initial = false) {\r\n  const { colorProfit, colorLoss } = colorStore;\r\n  const chartOptionsLoc: EChartsOption = {\r\n    dataset: {\r\n      dimensions: ['date', 'profit', 'currentProfit'],\r\n      source: cumulativeData.value,\r\n    },\r\n\r\n    series: [\r\n      {\r\n        // Keep  current-profit before profit, so the starting symbol is behind\r\n        type: 'line',\r\n        name: 'currentProfit',\r\n\r\n        animation: initial,\r\n\r\n        lineStyle: {\r\n          color: openProfit.value > 0 ? colorProfit : colorLoss,\r\n          type: 'dotted',\r\n        },\r\n        itemStyle: {\r\n          color: openProfit.value > 0 ? colorProfit : colorLoss,\r\n        },\r\n        encode: {\r\n          x: 'date',\r\n          y: 'currentProfit',\r\n        },\r\n      },\r\n      {\r\n        type: 'line',\r\n        name: CHART_PROFIT,\r\n        animation: initial,\r\n        step: 'end',\r\n        lineStyle: {\r\n          color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\r\n        },\r\n        itemStyle: {\r\n          color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\r\n        },\r\n        encode: {\r\n          x: 'date',\r\n          y: 'profit',\r\n        },\r\n        // symbol: 'none',\r\n      },\r\n    ],\r\n  };\r\n  // TODO: maybe have profit lines per bot?\r\n  // this.botList.forEach((botId: string) => {\r\n  //   console.log('bot', botId);\r\n  //   chartOptionsLoc.series.push({\r\n  //     type: 'line',\r\n  //     name: botId,\r\n  //     animation: true,\r\n  //     step: 'end',\r\n  //     lineStyle: {\r\n  //       color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\r\n  //     },\r\n  //     itemStylesettingsStore.chartTheme === 'dark' ? '#c2c2c2' : 'black',\r\n  //     },\r\n  //     // symbol: 'none',\r\n  //   });\r\n  // });\r\n  return chartOptionsLoc;\r\n}\r\nfunction updateChart(initial = false) {\r\n  const chartOptionsLoc = generateChart(initial);\r\n  chart.value?.setOption(chartOptionsLoc, {\r\n    replaceMerge: ['series', 'dataset'],\r\n    notMerge: !initial,\r\n  });\r\n}\r\n\r\nfunction initializeChart() {\r\n  chart.value?.setOption({}, { notMerge: true });\r\n  const chartOptionsLoc: EChartsOption = {\r\n    title: {\r\n      text: 'Cumulative Profit',\r\n      show: props.showTitle,\r\n    },\r\n    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      formatter: (params) => {\r\n        const profit = params[0].data.profit;\r\n        const currentProfit = params[0].data['currentProfit'];\r\n        const profitText = currentProfit\r\n          ? `Projected profit (incl. unrealized): ${formatPrice(currentProfit, 3)}`\r\n          : `Profit: ${formatPrice(profit, 3)}`;\r\n        return `${timestampToDateString(params[1].data.date)}<br />${\r\n          params[1].marker\r\n        }${profitText}`;\r\n      },\r\n      axisPointer: {\r\n        type: 'line',\r\n        label: {\r\n          backgroundColor: '#6a7985',\r\n        },\r\n      },\r\n    },\r\n    legend: {\r\n      data: [CHART_PROFIT],\r\n      right: '5%',\r\n      selectedMode: false,\r\n    },\r\n    useUTC: false,\r\n    xAxis: {\r\n      type: 'time',\r\n    },\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n        name: CHART_PROFIT,\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        nameRotate: 90,\r\n        nameLocation: 'middle',\r\n        nameGap: 40,\r\n      },\r\n    ],\r\n    grid: {\r\n      bottom: 80,\r\n    },\r\n    dataZoom: [\r\n      {\r\n        type: 'inside',\r\n        // xAxisIndex: [0],\r\n        start: 0,\r\n\r\n        end: 100,\r\n      },\r\n      {\r\n        // xAxisIndex: [0],\r\n        bottom: 10,\r\n        start: 0,\r\n        end: 100,\r\n        ...dataZoomPartial,\r\n      },\r\n    ],\r\n  };\r\n  const chartOptionsLoc1 = generateChart(true);\r\n  // Merge the series and dataset, but not the rest\r\n  chartOptionsLoc.series = chartOptionsLoc1.series;\r\n  chartOptionsLoc.dataset = chartOptionsLoc1.dataset;\r\n\r\n  chart.value?.setOption(chartOptionsLoc, { notMerge: true });\r\n  updateChart(true);\r\n}\r\n\r\nonMounted(() => {\r\n  initializeChart();\r\n});\r\n\r\nwatchThrottled(\r\n  () => props.openTrades,\r\n  () => {\r\n    updateChart();\r\n  },\r\n  { throttle: 60 * 1000 },\r\n);\r\nwatch(\r\n  () => props.trades,\r\n  () => {\r\n    updateChart();\r\n  },\r\n);\r\n</script>\r\n\r\n<style scoped>\r\n.echarts {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 150px;\r\n}\r\n</style>\r\n","<template>\r\n  <e-charts\r\n    v-if=\"trades.length > 0\"\r\n    :option=\"chartOptions\"\r\n    autoresize\r\n    :theme=\"settingsStore.chartTheme\"\r\n  />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport ECharts from 'vue-echarts';\r\nimport { EChartsOption } from 'echarts';\r\n\r\nimport { use } from 'echarts/core';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { LineChart, BarChart } from 'echarts/charts';\r\nimport {\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  VisualMapComponent,\r\n  VisualMapPiecewiseComponent,\r\n} from 'echarts/components';\r\n\r\nimport { ClosedTrade } from '@/types';\r\nimport { useSettingsStore } from '@/stores/settings';\r\n\r\nimport { timestampms } from '@/shared/formatters';\r\nimport { dataZoomPartial } from '@/shared/charts/chartZoom';\r\nimport { useColorStore } from '@/stores/colors';\r\n\r\nuse([\r\n  BarChart,\r\n  LineChart,\r\n\r\n  CanvasRenderer,\r\n\r\n  DatasetComponent,\r\n  DataZoomComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  VisualMapComponent,\r\n  VisualMapPiecewiseComponent,\r\n]);\r\n\r\n// Define Column labels here to avoid typos\r\nconst CHART_PROFIT = 'Profit %';\r\nconst CHART_COLOR = '#9be0a8';\r\n\r\nconst props = defineProps({\r\n  trades: { required: true, type: Array as () => ClosedTrade[] },\r\n  showTitle: { default: true, type: Boolean },\r\n});\r\nconst settingsStore = useSettingsStore();\r\nconst colorStore = useColorStore();\r\nconst chartData = computed(() => {\r\n  const res: (number | string)[][] = [];\r\n  const sortedTrades = props.trades\r\n    .slice(0)\r\n    .sort((a, b) => (a.close_timestamp > b.close_timestamp ? 1 : -1));\r\n  for (let i = 0, len = sortedTrades.length; i < len; i += 1) {\r\n    const trade = sortedTrades[i];\r\n    const entry = [\r\n      i,\r\n      (trade.profit_ratio * 100).toFixed(2),\r\n      trade.pair,\r\n      trade.botName,\r\n      timestampms(trade.close_timestamp),\r\n      trade.is_short === undefined || !trade.is_short ? 'Long' : 'Short',\r\n    ];\r\n    res.push(entry);\r\n  }\r\n  return res;\r\n});\r\n\r\nconst chartOptions = computed((): EChartsOption => {\r\n  // const { chartData } = this;\r\n  // Show a maximum of 50 trades by default - allowing to zoom out further.\r\n  const datazoomStart = chartData.value.length > 0 ? (1 - 50 / chartData.value.length) * 100 : 100;\r\n  return {\r\n    title: {\r\n      text: 'Trades log',\r\n      show: props.showTitle,\r\n    },\r\n    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n    dataset: {\r\n      dimensions: ['date', 'profit'],\r\n      source: chartData.value,\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      formatter: (params) => {\r\n        const botName = params[0].data[3] ? ` | ${params[0].data[3]}` : '';\r\n        return `${params[0].data[2]} | ${params[0].data[5]} ${botName}<br>${params[0].data[4]}<br>Profit ${params[0].data[1]} %`;\r\n      },\r\n      axisPointer: {\r\n        type: 'line',\r\n        label: {\r\n          backgroundColor: '#6a7985',\r\n        },\r\n      },\r\n    },\r\n    xAxis: {\r\n      type: 'value',\r\n      show: false,\r\n    },\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n        name: CHART_PROFIT,\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        nameRotate: 90,\r\n        nameLocation: 'middle',\r\n        nameGap: 30,\r\n      },\r\n    ],\r\n    grid: {\r\n      bottom: 80,\r\n    },\r\n    dataZoom: [\r\n      {\r\n        type: 'inside',\r\n        start: datazoomStart,\r\n        end: 100,\r\n      },\r\n      {\r\n        bottom: 10,\r\n        start: datazoomStart,\r\n        end: 100,\r\n        ...dataZoomPartial,\r\n      },\r\n    ],\r\n    visualMap: [\r\n      {\r\n        show: true,\r\n        seriesIndex: 0,\r\n        pieces: [\r\n          {\r\n            max: 0.0,\r\n            color: colorStore.colorLoss,\r\n          },\r\n          {\r\n            min: 0.0,\r\n            color: colorStore.colorProfit,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    series: [\r\n      {\r\n        type: 'bar',\r\n        name: CHART_PROFIT,\r\n        barGap: '0%',\r\n        barCategoryGap: '0%',\r\n        animation: false,\r\n        label: {\r\n          show: true,\r\n          position: 'top',\r\n          rotate: 90,\r\n          offset: [7.5, 7.5],\r\n          formatter: '{@[1]} %',\r\n          color: settingsStore.chartTheme === 'dark' ? '#c2c2c2' : '#3c3c3c',\r\n        },\r\n        encode: {\r\n          x: 0,\r\n          y: 1,\r\n        },\r\n\r\n        itemStyle: {\r\n          color: CHART_COLOR,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.echarts {\r\n  width: 100%;\r\n  height: 100%;\r\n  min-height: 150px;\r\n}\r\n</style>\r\n"],"names":["binData","data","bins","minimum","binSize","baseBins","i","index","CHART_PROFIT","use","BarChart","CanvasRenderer","DatasetComponent","DataZoomComponent","LegendComponent","TitleComponent","TooltipComponent","props","__props","settingsStore","useSettingsStore","binOptions","computed","profits","trade","chartOptions","LineChart","GridComponent","colorStore","useColorStore","chart","ref","openProfit","a","v","cumulativeData","res","resD","closedTrades","b","profit","len","valueArray","k","lastProfit","lastDate","lastPoint","resultWitHOpen","tomorrow","generateChart","initial","colorProfit","colorLoss","updateChart","chartOptionsLoc","_a","initializeChart","params","currentProfit","profitText","formatPrice","timestampToDateString","dataZoomPartial","chartOptionsLoc1","_b","onMounted","watchThrottled","watch","CHART_COLOR","VisualMapComponent","VisualMapPiecewiseComponent","chartData","sortedTrades","entry","timestampms","datazoomStart","botName"],"mappings":"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"}