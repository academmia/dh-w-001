{"version":3,"file":"DashboardView-HugWV663.js","sources":["../../src/components/ftbot/BotComparisonList.vue","../../src/views/DashboardView.vue"],"sourcesContent":["<template>\r\n  <b-table\r\n    ref=\"tradesTable\"\r\n    small\r\n    hover\r\n    show-empty\r\n    primary-key=\"botId\"\r\n    :items=\"tableItems\"\r\n    :fields=\"tableFields\"\r\n  >\r\n    <template #cell(botName)=\"{ item, value }\">\r\n      <div class=\"d-flex flex-row\">\r\n        <b-form-checkbox\r\n          v-if=\"item.botId && botStore.botCount > 1\"\r\n          v-model=\"\r\n            botStore.botStores[(item as unknown as ComparisonTableItems).botId ?? ''].isSelected\r\n          \"\r\n          title=\"Show this bot in Dashboard\"\r\n          >{{ value }}</b-form-checkbox\r\n        >\r\n        <b-form-checkbox\r\n          v-if=\"!item.botId && botStore.botCount > 1\"\r\n          v-model=\"allToggled\"\r\n          title=\"Toggle all bots\"\r\n          >{{ value }}</b-form-checkbox\r\n        >\r\n        <span v-if=\"botStore.botCount <= 1\">{{ value }}</span>\r\n      </div>\r\n    </template>\r\n    <template #cell(profitOpen)=\"{ item }\">\r\n      <profit-pill\r\n        v-if=\"item.profitOpen && item.botId != 'Summary'\"\r\n        :profit-ratio=\"(item as unknown as ComparisonTableItems).profitOpenRatio\"\r\n        :profit-abs=\"(item as unknown as ComparisonTableItems).profitOpen\"\r\n        :profit-desc=\"`Total Profit (Open and realized) ${formatPercent(\r\n          (item as unknown as ComparisonTableItems).profitOpenRatio ?? 0.0,\r\n        )}`\"\r\n        :stake-currency=\"(item as unknown as ComparisonTableItems).stakeCurrency\"\r\n      />\r\n    </template>\r\n    <template #cell(profitClosed)=\"{ item }\">\r\n      <profit-pill\r\n        v-if=\"item.profitClosed && item.botId != 'Summary'\"\r\n        :profit-ratio=\"(item as unknown as ComparisonTableItems).profitClosedRatio\"\r\n        :profit-abs=\"(item as unknown as ComparisonTableItems).profitClosed\"\r\n        :stake-currency=\"(item as unknown as ComparisonTableItems).stakeCurrency\"\r\n      />\r\n    </template>\r\n\r\n    <template #cell(balance)=\"{ item }\">\r\n      <div v-if=\"item.balance\">\r\n        <span :title=\"(item as unknown as ComparisonTableItems).stakeCurrency\"\r\n          >{{\r\n            formatPrice(\r\n              (item as unknown as ComparisonTableItems).balance ?? 0,\r\n              (item as unknown as ComparisonTableItems).stakeCurrencyDecimals,\r\n            )\r\n          }}\r\n        </span>\r\n        <span class=\"text-small\">{{\r\n          ` ${item.stakeCurrency}${item.isDryRun ? ' (dry)' : ''}`\r\n        }}</span>\r\n      </div>\r\n    </template>\r\n    <template #cell(winVsLoss)=\"{ item }\">\r\n      <div v-if=\"item.losses !== undefined\">\r\n        <span class=\"text-profit\">{{ item.wins }}</span> /\r\n        <span class=\"text-loss\">{{ item.losses }}</span>\r\n      </div>\r\n    </template>\r\n  </b-table>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { formatPrice, formatPercent } from '@/shared/formatters';\r\n\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { ProfitInterface, ComparisonTableItems } from '@/types';\r\nimport { TableField, TableItem } from 'bootstrap-vue-next';\r\n\r\nconst botStore = useBotStore();\r\n\r\nconst allToggled = computed<boolean>({\r\n  get: () => Object.values(botStore.botStores).every((i) => i.isSelected),\r\n  set: (val) => {\r\n    for (const botId in botStore.botStores) {\r\n      botStore.botStores[botId].isSelected = val;\r\n    }\r\n  },\r\n});\r\n\r\nconst tableFields: TableField[] = [\r\n  { key: 'botName', label: 'Bot' },\r\n  { key: 'trades', label: 'Trades' },\r\n  { key: 'profitOpen', label: 'Open Profit' },\r\n  { key: 'profitClosed', label: 'Closed Profit' },\r\n  { key: 'balance', label: 'Balance' },\r\n  { key: 'winVsLoss', label: 'W/L' },\r\n];\r\n\r\nconst tableItems = computed<TableItem[]>(() => {\r\n  const val: ComparisonTableItems[] = [];\r\n  const summary: ComparisonTableItems = {\r\n    botId: undefined,\r\n    botName: 'Summary',\r\n    profitClosed: 0,\r\n    profitClosedRatio: undefined,\r\n    profitOpen: 0,\r\n    profitOpenRatio: undefined,\r\n    stakeCurrency: 'USDT',\r\n    wins: 0,\r\n    losses: 0,\r\n  };\r\n\r\n  Object.entries(botStore.allProfit).forEach(([k, v]: [k: string, v: ProfitInterface]) => {\r\n    const allStakes = botStore.allOpenTrades[k].reduce((a, b) => a + b.stake_amount, 0);\r\n    const profitOpenRatio =\r\n      botStore.allOpenTrades[k].reduce(\r\n        (a, b) => a + (b.total_profit_ratio ?? b.profit_ratio) * b.stake_amount,\r\n        0,\r\n      ) / allStakes;\r\n    const profitOpen = botStore.allOpenTrades[k].reduce(\r\n      (a, b) => a + (b.total_profit_abs ?? b.profit_abs ?? 0),\r\n      0,\r\n    );\r\n\r\n    // TODO: handle one inactive bot ...\r\n    val.push({\r\n      botId: k,\r\n      botName: botStore.availableBots[k].botName || botStore.availableBots[k].botId,\r\n      trades: `${botStore.allOpenTradeCount[k]} / ${\r\n        botStore.allBotState[k]?.max_open_trades || 'N/A'\r\n      }`,\r\n      profitClosed: v.profit_closed_coin,\r\n      profitClosedRatio: v.profit_closed_ratio || 0,\r\n      stakeCurrency: botStore.allBotState[k]?.stake_currency || '',\r\n      profitOpenRatio,\r\n      profitOpen,\r\n      wins: v.winning_trades,\r\n      losses: v.losing_trades,\r\n      balance: botStore.allBalance[k]?.total_bot ?? botStore.allBalance[k]?.total,\r\n      stakeCurrencyDecimals: botStore.allBotState[k]?.stake_currency_decimals || 3,\r\n      isDryRun: botStore.allBotState[k]?.dry_run,\r\n    });\r\n    if (v.profit_closed_coin !== undefined) {\r\n      if (botStore.botStores[k].isSelected) {\r\n        // Summary should only include selected bots\r\n        summary.profitClosed += v.profit_closed_coin;\r\n        summary.profitOpen += profitOpen;\r\n        summary.wins += v.winning_trades;\r\n        summary.losses += v.losing_trades;\r\n        // summary.decimals = this.allBotState[k]?.stake_currency_decimals || summary.decimals;\r\n        // This will always take the last bot's stake currency\r\n        // And therefore may result in wrong values.\r\n        summary.stakeCurrency = botStore.allBotState[k]?.stake_currency || summary.stakeCurrency;\r\n      }\r\n    }\r\n  });\r\n  val.push(summary);\r\n  return val as unknown as TableItem[];\r\n});\r\n</script>\r\n\r\n<style scoped></style>\r\n","<template>\r\n  <grid-layout\r\n    class=\"h-100 w-100\"\r\n    :row-height=\"50\"\r\n    :layout=\"gridLayoutData\"\r\n    :vertical-compact=\"false\"\r\n    :margin=\"[5, 5]\"\r\n    :responsive-layouts=\"responsiveGridLayouts\"\r\n    :is-resizable=\"!isLayoutLocked\"\r\n    :is-draggable=\"!isLayoutLocked\"\r\n    :responsive=\"true\"\r\n    :prevent-collision=\"true\"\r\n    :cols=\"{ lg: 12, md: 12, sm: 12, xs: 4, xxs: 2 }\"\r\n    :col-num=\"12\"\r\n    @layout-updated=\"layoutUpdatedEvent\"\r\n    @update:breakpoint=\"breakpointChanged\"\r\n  >\r\n    <template #default=\"{ gridItemProps }\">\r\n      <grid-item\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutDaily.i\"\r\n        :x=\"gridLayoutDaily.x\"\r\n        :y=\"gridLayoutDaily.y\"\r\n        :w=\"gridLayoutDaily.w\"\r\n        :h=\"gridLayoutDaily.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer :header=\"`Daily Profit ${botStore.botCount > 1 ? 'combined' : ''}`\">\r\n          <TimePeriodChart\r\n            v-if=\"botStore.allDailyStatsSelectedBots\"\r\n            :daily-stats=\"botStore.allDailyStatsSelectedBots\"\r\n            :show-title=\"false\"\r\n          />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutBotComparison.i\"\r\n        :x=\"gridLayoutBotComparison.x\"\r\n        :y=\"gridLayoutBotComparison.y\"\r\n        :w=\"gridLayoutBotComparison.w\"\r\n        :h=\"gridLayoutBotComparison.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"Bot comparison\">\r\n          <bot-comparison-list />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutAllOpenTrades.i\"\r\n        :x=\"gridLayoutAllOpenTrades.x\"\r\n        :y=\"gridLayoutAllOpenTrades.y\"\r\n        :w=\"gridLayoutAllOpenTrades.w\"\r\n        :h=\"gridLayoutAllOpenTrades.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer>\r\n          <template #header>\r\n            <div class=\"d-flex justify-content-center\">\r\n              Open Trades\r\n              <InfoBox\r\n                class=\"ms-2\"\r\n                hint=\"Open trades of all selected bots. Click on a trade to go to the trade page for that trade/bot.\"\r\n              />\r\n            </div>\r\n          </template>\r\n          <trade-list active-trades :trades=\"botStore.allOpenTradesSelectedBots\" multi-bot-view />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutCumChart.i\"\r\n        :x=\"gridLayoutCumChart.x\"\r\n        :y=\"gridLayoutCumChart.y\"\r\n        :w=\"gridLayoutCumChart.w\"\r\n        :h=\"gridLayoutCumChart.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"Cumulative Profit\">\r\n          <CumProfitChart\r\n            :trades=\"botStore.allTradesSelectedBots\"\r\n            :open-trades=\"botStore.allOpenTradesSelectedBots\"\r\n            :show-title=\"false\"\r\n          />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutAllClosedTrades.i\"\r\n        :x=\"gridLayoutAllClosedTrades.x\"\r\n        :y=\"gridLayoutAllClosedTrades.y\"\r\n        :w=\"gridLayoutAllClosedTrades.w\"\r\n        :h=\"gridLayoutAllClosedTrades.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer>\r\n          <template #header>\r\n            <div class=\"d-flex justify-content-center\">\r\n              Closed Trades\r\n              <InfoBox\r\n                class=\"ms-2\"\r\n                hint=\"Closed trades for all selected bots. Click on a trade to go to the trade page for that trade/bot.\"\r\n              />\r\n            </div>\r\n          </template>\r\n          <trade-list\r\n            :active-trades=\"false\"\r\n            show-filter\r\n            :trades=\"botStore.allClosedTradesSelectedBots\"\r\n            multi-bot-view\r\n          />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutProfitDistribution.i\"\r\n        :x=\"gridLayoutProfitDistribution.x\"\r\n        :y=\"gridLayoutProfitDistribution.y\"\r\n        :w=\"gridLayoutProfitDistribution.w\"\r\n        :h=\"gridLayoutProfitDistribution.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"Profit Distribution\">\r\n          <ProfitDistributionChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n      <grid-item\r\n        v-bind=\"gridItemProps\"\r\n        :i=\"gridLayoutTradesLogChart.i\"\r\n        :x=\"gridLayoutTradesLogChart.x\"\r\n        :y=\"gridLayoutTradesLogChart.y\"\r\n        :w=\"gridLayoutTradesLogChart.w\"\r\n        :h=\"gridLayoutTradesLogChart.h\"\r\n        :min-w=\"3\"\r\n        :min-h=\"4\"\r\n        drag-allow-from=\".drag-header\"\r\n      >\r\n        <DraggableContainer header=\"Trades Log\">\r\n          <TradesLogChart :trades=\"botStore.allTradesSelectedBots\" :show-title=\"false\" />\r\n        </DraggableContainer>\r\n      </grid-item>\r\n    </template>\r\n  </grid-layout>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { DashboardLayout, findGridLayout, useLayoutStore } from '@/stores/layout';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { GridItemData } from '@/types';\r\n\r\nconst botStore = useBotStore();\r\n\r\nconst layoutStore = useLayoutStore();\r\nconst currentBreakpoint = ref('');\r\n\r\nconst breakpointChanged = (newBreakpoint: string) => {\r\n  // console.log('breakpoint:', newBreakpoint);\r\n  currentBreakpoint.value = newBreakpoint;\r\n};\r\nconst isResizableLayout = computed(() =>\r\n  ['', 'sm', 'md', 'lg', 'xl'].includes(currentBreakpoint.value),\r\n);\r\nconst isLayoutLocked = computed(() => {\r\n  return layoutStore.layoutLocked || !isResizableLayout.value;\r\n});\r\n\r\nconst gridLayoutData = computed((): GridItemData[] => {\r\n  if (isResizableLayout.value) {\r\n    return layoutStore.dashboardLayout;\r\n  }\r\n  return [...layoutStore.getDashboardLayoutSm];\r\n});\r\n\r\nconst layoutUpdatedEvent = (newLayout) => {\r\n  if (isResizableLayout.value) {\r\n    console.log('newlayout', newLayout);\r\n    console.log('saving dashboard');\r\n    layoutStore.dashboardLayout = newLayout;\r\n  }\r\n};\r\n\r\nconst gridLayoutDaily = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.dailyChart);\r\n});\r\n\r\nconst gridLayoutBotComparison = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.botComparison);\r\n});\r\n\r\nconst gridLayoutAllOpenTrades = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.allOpenTrades);\r\n});\r\nconst gridLayoutAllClosedTrades = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.allClosedTrades);\r\n});\r\n\r\nconst gridLayoutCumChart = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.cumChartChart);\r\n});\r\nconst gridLayoutProfitDistribution = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.profitDistributionChart);\r\n});\r\nconst gridLayoutTradesLogChart = computed((): GridItemData => {\r\n  return findGridLayout(gridLayoutData.value, DashboardLayout.tradesLogChart);\r\n});\r\n\r\nconst responsiveGridLayouts = computed(() => {\r\n  return {\r\n    sm: layoutStore.getDashboardLayoutSm,\r\n  };\r\n});\r\n\r\nonMounted(async () => {\r\n  botStore.allGetDaily({ timescale: 30 });\r\n  // botStore.activeBot.getTrades();\r\n  botStore.activeBot.getOpenTrades();\r\n  botStore.activeBot.getProfit();\r\n});\r\n</script>\r\n\r\n<style scoped></style>\r\n"],"names":["botStore","useBotStore","allToggled","computed","i","val","botId","tableFields","tableItems","summary","k","v","allStakes","a","b","profitOpenRatio","profitOpen","_a","_b","_c","_d","_e","_f","_g","layoutStore","useLayoutStore","currentBreakpoint","ref","breakpointChanged","newBreakpoint","isResizableLayout","isLayoutLocked","gridLayoutData","layoutUpdatedEvent","newLayout","gridLayoutDaily","findGridLayout","DashboardLayout","gridLayoutBotComparison","gridLayoutAllOpenTrades","gridLayoutAllClosedTrades","gridLayoutCumChart","gridLayoutProfitDistribution","gridLayoutTradesLogChart","responsiveGridLayouts","onMounted"],"mappings":"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"}