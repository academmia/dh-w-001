{"version":3,"file":"TimePeriodChart-_svAPNxe.js","sources":["../../src/components/charts/TimePeriodChart.vue"],"sourcesContent":["<template>\r\n  <e-charts\r\n    v-if=\"dailyStats.data\"\r\n    ref=\"dailyChart\"\r\n    :option=\"dailyChartOptions\"\r\n    :theme=\"settingsStore.chartTheme\"\r\n    :style=\"{ height: width * 0.6 + 'px' }\"\r\n    autoresize\r\n  />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport ECharts from 'vue-echarts';\r\n// import { EChartsOption } from 'echarts';\r\n\r\nimport { use } from 'echarts/core';\r\nimport { CanvasRenderer } from 'echarts/renderers';\r\nimport { LineChart, BarChart } from 'echarts/charts';\r\nimport {\r\n  DatasetComponent,\r\n  GridComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  VisualMapComponent,\r\n} from 'echarts/components';\r\n\r\nimport { TimeSummaryReturnValue } from '@/types';\r\nimport { useSettingsStore } from '@/stores/settings';\r\nimport { EChartsOption } from 'echarts';\r\nimport { useElementSize } from '@vueuse/core';\r\nimport { useColorStore } from '@/stores/colors';\r\n\r\nuse([\r\n  BarChart,\r\n  LineChart,\r\n  CanvasRenderer,\r\n  GridComponent,\r\n  DatasetComponent,\r\n  LegendComponent,\r\n  TitleComponent,\r\n  TooltipComponent,\r\n  VisualMapComponent,\r\n]);\r\n\r\n// Define Column labels here to avoid typos\r\nconst CHART_ABS_PROFIT = 'Absolute profit';\r\nconst CHART_TRADE_COUNT = 'Trade Count';\r\n\r\nconst props = defineProps({\r\n  dailyStats: {\r\n    type: Object as () => TimeSummaryReturnValue,\r\n    required: true,\r\n  },\r\n  showTitle: {\r\n    type: Boolean,\r\n    default: true,\r\n  },\r\n});\r\n\r\nconst settingsStore = useSettingsStore();\r\nconst colorStore = useColorStore();\r\n\r\nconst dailyChart = ref(null);\r\nconst { width } = useElementSize(dailyChart);\r\n\r\nconst absoluteMin = computed(() =>\r\n  props.dailyStats.data.reduce(\r\n    (min, p) => (p.abs_profit < min ? p.abs_profit : min),\r\n    props.dailyStats.data[0]?.abs_profit,\r\n  ),\r\n);\r\nconst absoluteMax = computed(() =>\r\n  props.dailyStats.data.reduce(\r\n    (max, p) => (p.abs_profit > max ? p.abs_profit : max),\r\n    props.dailyStats.data[0]?.abs_profit,\r\n  ),\r\n);\r\nconst dailyChartOptions: ComputedRef<EChartsOption> = computed(() => {\r\n  return {\r\n    title: {\r\n      text: 'Daily profit',\r\n      show: props.showTitle,\r\n    },\r\n    backgroundColor: 'rgba(0, 0, 0, 0)',\r\n    dataset: {\r\n      dimensions: ['date', 'abs_profit', 'trade_count'],\r\n      source: props.dailyStats.data,\r\n    },\r\n    tooltip: {\r\n      trigger: 'axis',\r\n      axisPointer: {\r\n        type: 'line',\r\n        label: {\r\n          backgroundColor: '#6a7985',\r\n        },\r\n      },\r\n    },\r\n    legend: {\r\n      data: [CHART_ABS_PROFIT, CHART_TRADE_COUNT],\r\n      right: '5%',\r\n    },\r\n    xAxis: [\r\n      {\r\n        type: 'category',\r\n      },\r\n    ],\r\n    visualMap: [\r\n      {\r\n        dimension: 1,\r\n        seriesIndex: 0,\r\n        show: false,\r\n        pieces: [\r\n          {\r\n            max: 0.0,\r\n            min: absoluteMin.value,\r\n            color: colorStore.colorLoss,\r\n          },\r\n          {\r\n            min: 0.0,\r\n            max: absoluteMax.value,\r\n            color: colorStore.colorProfit,\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    yAxis: [\r\n      {\r\n        type: 'value',\r\n        name: CHART_ABS_PROFIT,\r\n        splitLine: {\r\n          show: false,\r\n        },\r\n        nameRotate: 90,\r\n        nameLocation: 'middle',\r\n        nameGap: 35,\r\n      },\r\n      {\r\n        type: 'value',\r\n        name: CHART_TRADE_COUNT,\r\n        nameRotate: 90,\r\n        nameLocation: 'middle',\r\n        nameGap: 30,\r\n      },\r\n    ],\r\n    series: [\r\n      {\r\n        type: 'line',\r\n        name: CHART_ABS_PROFIT,\r\n        // Color is induced by visualMap\r\n      },\r\n      {\r\n        type: 'bar',\r\n        name: CHART_TRADE_COUNT,\r\n        itemStyle: {\r\n          color: 'rgba(150,150,150,0.3)',\r\n        },\r\n        yAxisIndex: 1,\r\n      },\r\n    ],\r\n  };\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.echarts {\r\n  min-height: 240px;\r\n}\r\n</style>\r\n"],"names":["CHART_ABS_PROFIT","CHART_TRADE_COUNT","use","BarChart","LineChart","CanvasRenderer","GridComponent","DatasetComponent","LegendComponent","TitleComponent","TooltipComponent","VisualMapComponent","props","__props","settingsStore","useSettingsStore","colorStore","useColorStore","dailyChart","ref","width","useElementSize","absoluteMin","computed","min","p","_a","absoluteMax","max","dailyChartOptions"],"mappings":"+sBA8CMA,EAAmB,kBACnBC,EAAoB,sIAdtBC,EAAA,CACFC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,CAAA,CACD,EAMD,MAAMC,EAAQC,EAWRC,EAAgBC,IAChBC,EAAaC,IAEbC,EAAaC,EAAI,IAAI,EACrB,CAAE,MAAAC,CAAA,EAAUC,EAAeH,CAAU,EAErCI,EAAcC,EAAS,WAC3B,OAAAX,EAAM,WAAW,KAAK,OACpB,CAACY,EAAKC,IAAOA,EAAE,WAAaD,EAAMC,EAAE,WAAaD,GACjDE,EAAAd,EAAM,WAAW,KAAK,CAAC,IAAvB,YAAAc,EAA0B,UAC5B,EAAA,EAEIC,EAAcJ,EAAS,WAC3B,OAAAX,EAAM,WAAW,KAAK,OACpB,CAACgB,EAAKH,IAAOA,EAAE,WAAaG,EAAMH,EAAE,WAAaG,GACjDF,EAAAd,EAAM,WAAW,KAAK,CAAC,IAAvB,YAAAc,EAA0B,UAC5B,EAAA,EAEIG,EAAgDN,EAAS,KACtD,CACL,MAAO,CACL,KAAM,eACN,KAAMX,EAAM,SACd,EACA,gBAAiB,mBACjB,QAAS,CACP,WAAY,CAAC,OAAQ,aAAc,aAAa,EAChD,OAAQA,EAAM,WAAW,IAC3B,EACA,QAAS,CACP,QAAS,OACT,YAAa,CACX,KAAM,OACN,MAAO,CACL,gBAAiB,SACnB,CACF,CACF,EACA,OAAQ,CACN,KAAM,CAACZ,EAAkBC,CAAiB,EAC1C,MAAO,IACT,EACA,MAAO,CACL,CACE,KAAM,UACR,CACF,EACA,UAAW,CACT,CACE,UAAW,EACX,YAAa,EACb,KAAM,GACN,OAAQ,CACN,CACE,IAAK,EACL,IAAKqB,EAAY,MACjB,MAAON,EAAW,SACpB,EACA,CACE,IAAK,EACL,IAAKW,EAAY,MACjB,MAAOX,EAAW,WACpB,CACF,CACF,CACF,EACA,MAAO,CACL,CACE,KAAM,QACN,KAAMhB,EACN,UAAW,CACT,KAAM,EACR,EACA,WAAY,GACZ,aAAc,SACd,QAAS,EACX,EACA,CACE,KAAM,QACN,KAAMC,EACN,WAAY,GACZ,aAAc,SACd,QAAS,EACX,CACF,EACA,OAAQ,CACN,CACE,KAAM,OACN,KAAMD,CAER,EACA,CACE,KAAM,MACN,KAAMC,EACN,UAAW,CACT,MAAO,uBACT,EACA,WAAY,CACd,CACF,CAAA,EAEH"}