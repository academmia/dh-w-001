{"version":3,"file":"BacktestingView-AXvbhKdS.js","sources":["../../src/components/ftbot/TradeListNav.vue","../../src/components/ftbot/BacktestResultChart.vue","../../src/shared/objectToTableItems.ts","../../src/shared/backtestMetrics.ts","../../src/components/ftbot/BacktestResultComparison.vue","../../src/components/ftbot/BacktestResultPeriodBreakdown.vue","../../src/components/ftbot/BacktestResultAnalysis.vue","../../src/components/ftbot/FreqaiModelSelect.vue","../../src/stores/btStore.ts","../../src/components/ftbot/BacktestRun.vue","../../src/components/ftbot/BacktestHistoryLoad.vue","../../src/components/ftbot/BacktestResultSelect.vue","../../src/views/BacktestingView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <b-list-group>\r\n      <b-list-group-item\r\n        button\r\n        class=\"d-flex flex-wrap justify-content-center align-items-center\"\r\n        :title=\"'Trade Navigation'\"\r\n        @click=\"sortNewestFirst = !sortNewestFirst\"\r\n        >Trade Navigation {{ sortNewestFirst ? '&#8595;' : '&#8593;' }}\r\n      </b-list-group-item>\r\n      <b-list-group-item\r\n        v-for=\"(trade, i) in sortedTrades\"\r\n        :key=\"trade.open_timestamp\"\r\n        button\r\n        class=\"d-flex flex-column py-1 pe-1 align-items-stretch\"\r\n        :title=\"`${trade.pair}`\"\r\n        :active=\"trade.open_timestamp === selectedTrade.open_timestamp\"\r\n        @click=\"onTradeSelect(trade)\"\r\n      >\r\n        <div class=\"d-flex\">\r\n          <div class=\"d-flex flex-column\">\r\n            <div>\r\n              <span v-if=\"botStore.activeBot.botState.trading_mode !== 'spot'\">{{\r\n                trade.is_short ? 'S-' : 'L-'\r\n              }}</span>\r\n              <DateTimeTZ :date=\"trade.open_timestamp\" />\r\n            </div>\r\n            <TradeProfit :trade=\"trade\" class=\"my-1\" />\r\n            <ProfitPill\r\n              v-if=\"backtestMode\"\r\n              :profit-ratio=\"trade.profit_ratio\"\r\n              :stake-currency=\"botStore.activeBot.stakeCurrency\"\r\n            />\r\n          </div>\r\n          <b-button\r\n            size=\"sm\"\r\n            class=\"ms-auto mt-auto\"\r\n            variant=\"outline-secondary\"\r\n            @click=\"ordersVisible[i] = !ordersVisible[i]\"\r\n            ><i-mdi-chevron-right v-if=\"!ordersVisible[i]\" width=\"24\" height=\"24\" />\r\n            <i-mdi-chevron-down v-if=\"ordersVisible[i]\" width=\"24\" height=\"24\" />\r\n          </b-button>\r\n        </div>\r\n        <b-collapse v-model=\"ordersVisible[i]\">\r\n          <ul class=\"px-3 m-0\">\r\n            <li\r\n              v-for=\"order in trade.orders?.filter((o) => o.order_filled_timestamp !== null)\"\r\n              :key=\"order.order_timestamp\"\r\n            >\r\n              {{ order.ft_order_side }} {{ order.amount }} at {{ order.safe_price }}\r\n            </li>\r\n          </ul>\r\n        </b-collapse>\r\n      </b-list-group-item>\r\n      <b-list-group-item v-if=\"trades.length === 0\">No trades to show...</b-list-group-item>\r\n    </b-list-group>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { Trade } from '@/types';\r\n\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst props = defineProps({\r\n  trades: { required: true, type: Array as () => Trade[] },\r\n  backtestMode: { required: false, default: false, type: Boolean },\r\n});\r\nconst emit = defineEmits(['trade-select']);\r\n\r\nconst botStore = useBotStore();\r\nconst selectedTrade = ref({} as Trade);\r\nconst sortNewestFirst = ref(true);\r\n\r\nconst onTradeSelect = (trade: Trade) => {\r\n  selectedTrade.value = trade;\r\n  emit('trade-select', trade);\r\n};\r\n\r\nconst sortedTrades = computed(() => {\r\n  return props.trades\r\n    .slice()\r\n    .sort((a, b) =>\r\n      sortNewestFirst.value\r\n        ? b.open_timestamp - a.open_timestamp\r\n        : a.open_timestamp - b.open_timestamp,\r\n    );\r\n});\r\n\r\nconst ordersVisible = ref(sortedTrades.value.map(() => false));\r\n\r\nwatch(\r\n  () => botStore.activeBot.selectedPair,\r\n  () => {\r\n    ordersVisible.value = sortedTrades.value.map(() => false);\r\n  },\r\n);\r\n</script>\r\n\r\n<style scoped>\r\n.list-group {\r\n  text-align: left;\r\n}\r\n</style>\r\n","<template>\r\n  <div>\r\n    <div class=\"d-flex flex-row mb-1 align-items-center\">\r\n      <div class=\"me-2\">\r\n        <b-button\r\n          aria-label=\"Close\"\r\n          title=\"Pair Navigation\"\r\n          variant=\"outline-secondary\"\r\n          size=\"sm\"\r\n          @click=\"isBarVisible.left = !isBarVisible.left\"\r\n        >\r\n          <i-mdi-chevron-right v-if=\"!isBarVisible.left\" width=\"24\" height=\"24\" />\r\n          <i-mdi-chevron-left v-if=\"isBarVisible.left\" width=\"24\" height=\"24\" />\r\n        </b-button>\r\n      </div>\r\n      <span class=\"flex-fill\">\r\n        Graph will always show the latest values for the selected strategy. <br />\r\n        Timerange: {{ timerange }} - {{ strategy }}\r\n      </span>\r\n      <div class=\"col-md-1 text-end\">\r\n        <b-button\r\n          aria-label=\"Close\"\r\n          variant=\"outline-secondary\"\r\n          title=\"Trade Navigation\"\r\n          size=\"sm\"\r\n          @click=\"isBarVisible.right = !isBarVisible.right\"\r\n        >\r\n          <i-mdi-chevron-right v-if=\"isBarVisible.right\" width=\"24\" height=\"24\" />\r\n          <i-mdi-chevron-left v-if=\"!isBarVisible.right\" width=\"24\" height=\"24\" />\r\n        </b-button>\r\n      </div>\r\n    </div>\r\n    <div class=\"text-center d-flex flex-row h-100 align-items-stretch\">\r\n      <Transition name=\"fadeleft\">\r\n        <PairSummary\r\n          v-if=\"isBarVisible.left\"\r\n          class=\"col-md-2 overflow-y-auto overflow-x-hidden\"\r\n          style=\"max-height: calc(100vh - 200px)\"\r\n          :pairlist=\"pairlist\"\r\n          :trades=\"trades\"\r\n          sort-method=\"profit\"\r\n          :backtest-mode=\"true\"\r\n        />\r\n      </Transition>\r\n      <CandleChartContainer\r\n        :available-pairs=\"pairlist\"\r\n        :historic-view=\"!!true\"\r\n        :timeframe=\"timeframe\"\r\n        :timerange=\"timerange\"\r\n        :strategy=\"strategy\"\r\n        :trades=\"trades\"\r\n        class=\"flex-shrink-1 candle-chart-container w-100 px-0 h-100 align-self-stretch\"\r\n        :slider-position=\"sliderPosition\"\r\n        :freqai-model=\"freqaiModel\"\r\n      >\r\n      </CandleChartContainer>\r\n      <Transition name=\"fade\">\r\n        <TradeListNav\r\n          v-if=\"isBarVisible.right\"\r\n          class=\"overflow-y-auto col-md-2 overflow-x-visible\"\r\n          style=\"max-height: calc(100vh - 200px)\"\r\n          :trades=\"trades.filter((t) => t.pair === botStore.activeBot.selectedPair)\"\r\n          @trade-select=\"navigateChartToTrade\"\r\n        />\r\n      </Transition>\r\n    </div>\r\n    <b-card header=\"Single trades\" class=\"row mt-2 w-100\">\r\n      <TradeList class=\"row trade-history mt-2 w-100\" :trades=\"trades\" :show-filter=\"true\" />\r\n    </b-card>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nimport { ChartSliderPosition, Trade } from '@/types';\r\n\r\ndefineProps({\r\n  timeframe: { required: true, type: String },\r\n  strategy: { required: true, type: String },\r\n  freqaiModel: { required: false, default: undefined, type: String },\r\n  timerange: { required: true, type: String },\r\n  pairlist: { required: true, type: Array as () => string[] },\r\n  trades: { required: true, type: Array as () => Trade[] },\r\n});\r\nconst botStore = useBotStore();\r\nconst isBarVisible = ref({ right: true, left: true });\r\nconst sliderPosition = ref<ChartSliderPosition>();\r\n\r\nconst navigateChartToTrade = (trade: Trade) => {\r\n  sliderPosition.value = {\r\n    startValue: trade.open_timestamp,\r\n    endValue: trade.close_timestamp,\r\n  };\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.candle-chart-container {\r\n  // TODO: Rough estimate - still to fix correctly\r\n  // Applies to all \"calc\" usages in this file.\r\n  height: calc(100vh - 250px) !important;\r\n}\r\n\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: all 0.2s;\r\n}\r\n\r\n.fade-enter-from,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(30px);\r\n}\r\n.fadeleft-enter-active,\r\n.fadeleft-leave-active {\r\n  transition: all 0.2s;\r\n}\r\n\r\n.fadeleft-enter-from,\r\n.fadeleft-leave-to {\r\n  opacity: 0;\r\n  transform: translateX(-30px);\r\n}\r\n</style>\r\n","interface childObjects {\r\n  [key: string]: string | boolean | number | undefined;\r\n}\r\ninterface MutatingObject {\r\n  [key: string]: childObjects[];\r\n}\r\n\r\n/**\r\n *\r\n * @param originalobj Object in the form {Name, [{metric: value}]]}\r\n * @param valueKey Key to use for result\r\n * @returns Object in the form [{valueKey: metric, Name: value}]\r\n */\r\nexport function formatObjectForTable(originalobj: MutatingObject, valueKey: string) {\r\n  const result = Object.entries(originalobj).reduce((acc: childObjects[], [key, value]) => {\r\n    value.forEach((item) => {\r\n      const [metric, val] = Object.entries(item)[0];\r\n      const existingItem = acc.find((i) => i[valueKey] === metric);\r\n      if (existingItem) {\r\n        existingItem[key] = val;\r\n      } else {\r\n        acc.push({\r\n          [valueKey]: metric,\r\n          [key]: val,\r\n        });\r\n      }\r\n    });\r\n    return acc;\r\n  }, []);\r\n  return result;\r\n}\r\n","import { StrategyBacktestResult, Trade } from '@/types';\r\nimport {\r\n  formatPercent,\r\n  formatPrice,\r\n  humanizeDurationFromSeconds,\r\n  isNotUndefined,\r\n  timestampms,\r\n} from './formatters';\r\n\r\nfunction getSortedTrades(trades: Trade[]): Trade[] {\r\n  const sortedTrades = trades.slice().sort((a, b) => a.profit_ratio - b.profit_ratio);\r\n  return sortedTrades;\r\n}\r\n\r\nfunction getBestPair(trades: Trade[]) {\r\n  if (trades.length === 0) {\r\n    return 'N/A';\r\n  }\r\n  const value = trades[trades.length - 1];\r\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\r\n}\r\n\r\nfunction getWorstPair(trades: Trade[]) {\r\n  if (trades.length === 0) {\r\n    return 'N/A';\r\n  }\r\n  const value = trades[0];\r\n  return `${value.pair} ${formatPercent(value.profit_ratio, 2)}`;\r\n}\r\n\r\nfunction useFormatPriceStake(stake_currency_decimals: number, stake_currency: string) {\r\n  const formatPriceStake = (price) => {\r\n    return `${formatPrice(price, stake_currency_decimals)} ${stake_currency}`;\r\n  };\r\n  return formatPriceStake;\r\n}\r\n\r\nexport function generateBacktestMetricRows(result: StrategyBacktestResult) {\r\n  const sortedTrades = getSortedTrades(result.trades);\r\n  const bestPair = getBestPair(sortedTrades);\r\n  const worstPair = getWorstPair(sortedTrades);\r\n  const pairSummary = result.results_per_pair[result.results_per_pair.length - 1];\r\n\r\n  const formatPriceStake = useFormatPriceStake(\r\n    result.stake_currency_decimals,\r\n    result.stake_currency,\r\n  );\r\n\r\n  // Transpose Result into readable format\r\n  const shortMetrics =\r\n    result.trade_count_short && result.trade_count_short > 0\r\n      ? [\r\n          { '___ ': '___' },\r\n          {\r\n            'Long / Short': `${result.trade_count_long} / ${result.trade_count_short}`,\r\n          },\r\n          {\r\n            'Total profit Long': `${formatPercent(\r\n              result.profit_total_long || 0,\r\n            )} | ${formatPriceStake(result.profit_total_long_abs)}`,\r\n          },\r\n          {\r\n            'Total profit Short': `${formatPercent(\r\n              result.profit_total_short || 0,\r\n            )} | ${formatPriceStake(result.profit_total_short_abs)}`,\r\n          },\r\n        ]\r\n      : [];\r\n\r\n  const tmp = [\r\n    {\r\n      'Total Profit': `${formatPercent(result.profit_total)} | ${formatPriceStake(\r\n        result.profit_total_abs,\r\n      )}`,\r\n    },\r\n    {\r\n      CAGR: `${result.cagr ? formatPercent(result.cagr) : 'N/A'}`,\r\n    },\r\n    {\r\n      Sortino: `${result.sortino ? result.sortino.toFixed(2) : 'N/A'}`,\r\n    },\r\n    {\r\n      Sharpe: `${result.sharpe ? result.sharpe.toFixed(2) : 'N/A'}`,\r\n    },\r\n    {\r\n      Calmar: `${result.calmar ? result.calmar.toFixed(2) : 'N/A'}`,\r\n    },\r\n    {\r\n      [`Expectancy ${result.expectancy_ratio ? '(ratio)' : ''}`]: `${\r\n        result.expectancy\r\n          ? result.expectancy_ratio\r\n            ? result.expectancy.toFixed(2) + ' (' + result.expectancy_ratio.toFixed(2) + ')'\r\n            : result.expectancy.toFixed(2)\r\n          : 'N/A'\r\n      }`,\r\n    },\r\n    {\r\n      'Profit factor': `${result.profit_factor ? formatPrice(result.profit_factor, 3) : 'N/A'}`,\r\n    },\r\n    {\r\n      'Total trades / Daily Avg Trades': `${result.total_trades} / ${result.trades_per_day}`,\r\n    },\r\n    // { 'First trade': result.backtest_fi },\r\n    // { 'First trade Pair': result.backtest_best_day },\r\n    {\r\n      'Best day': `${formatPercent(result.backtest_best_day, 2)} | ${formatPriceStake(\r\n        result.backtest_best_day_abs,\r\n      )}`,\r\n    },\r\n    {\r\n      'Worst day': `${formatPercent(result.backtest_worst_day, 2)} | ${formatPriceStake(\r\n        result.backtest_worst_day_abs,\r\n      )}`,\r\n    },\r\n\r\n    {\r\n      'Win/Draw/Loss': `${pairSummary.wins} / ${pairSummary.draws} / ${pairSummary.losses} ${\r\n        isNotUndefined(pairSummary.winrate)\r\n          ? '(WR: ' +\r\n            formatPercent(\r\n              result.results_per_pair[result.results_per_pair.length - 1].winrate ?? 0,\r\n              2,\r\n            ) +\r\n            ')'\r\n          : ''\r\n      }`,\r\n    },\r\n    {\r\n      'Days win/draw/loss': `${result.winning_days} / ${result.draw_days} / ${result.losing_days}`,\r\n    },\r\n    {\r\n      'Avg. Duration winners': humanizeDurationFromSeconds(result.winner_holding_avg_s),\r\n    },\r\n    {\r\n      'Avg. Duration Losers': humanizeDurationFromSeconds(result.loser_holding_avg_s),\r\n    },\r\n    {\r\n      'Max Consecutive Wins / Loss':\r\n        result.max_consecutive_wins === undefined\r\n          ? 'N/A'\r\n          : `${result.max_consecutive_wins} / ${result.max_consecutive_losses}`,\r\n    },\r\n    { 'Rejected entry signals': result.rejected_signals },\r\n    {\r\n      'Entry/Exit timeouts': `${result.timedout_entry_orders} / ${result.timedout_exit_orders}`,\r\n    },\r\n    {\r\n      'Canceled Trade Entries': result.canceled_trade_entries ?? 'N/A',\r\n    },\r\n    {\r\n      'Canceled Entry Orders': result.canceled_entry_orders ?? 'N/A',\r\n    },\r\n    {\r\n      'Replaced Entry Orders': result.replaced_entry_orders ?? 'N/A',\r\n    },\r\n\r\n    ...shortMetrics,\r\n\r\n    { ___: '___' },\r\n    { 'Min balance': formatPriceStake(result.csum_min) },\r\n    { 'Max balance': formatPriceStake(result.csum_max) },\r\n    { 'Market change': formatPercent(result.market_change) },\r\n    { '___  ': '___' },\r\n    {\r\n      'Max Drawdown (Account)': formatPercent(result.max_drawdown_account),\r\n    },\r\n    {\r\n      'Max Drawdown ABS': formatPriceStake(result.max_drawdown_abs),\r\n    },\r\n    {\r\n      'Drawdown high | low': `${formatPriceStake(result.max_drawdown_high)} | ${formatPriceStake(\r\n        result.max_drawdown_low,\r\n      )}`,\r\n    },\r\n    { 'Drawdown start': timestampms(result.drawdown_start_ts) },\r\n    { 'Drawdown end': timestampms(result.drawdown_end_ts) },\r\n    { '___   ': '___' },\r\n\r\n    {\r\n      'Best Pair': `${result.best_pair.key} ${formatPercent(result.best_pair.profit_sum)}`,\r\n    },\r\n    {\r\n      'Worst Pair': `${result.worst_pair.key} ${formatPercent(result.worst_pair.profit_sum)}`,\r\n    },\r\n    { 'Best single Trade': bestPair },\r\n    { 'Worst single Trade': worstPair },\r\n  ];\r\n  return tmp;\r\n}\r\n\r\nexport function generateBacktestSettingRows(result: StrategyBacktestResult) {\r\n  const formatPriceStake = useFormatPriceStake(\r\n    result.stake_currency_decimals,\r\n    result.stake_currency,\r\n  );\r\n\r\n  return [\r\n    { 'Backtesting from': timestampms(result.backtest_start_ts) },\r\n    { 'Backtesting to': timestampms(result.backtest_end_ts) },\r\n    {\r\n      'BT execution time': humanizeDurationFromSeconds(\r\n        result.backtest_run_end_ts - result.backtest_run_start_ts,\r\n      ),\r\n    },\r\n    { 'Max open trades': result.max_open_trades },\r\n    { Timeframe: result.timeframe },\r\n    { 'Timeframe Detail': result.timeframe_detail || 'N/A' },\r\n    { Timerange: result.timerange },\r\n    { Stoploss: formatPercent(result.stoploss, 2) },\r\n    { 'Trailing Stoploss': result.trailing_stop },\r\n    {\r\n      'Trail only when offset is reached': result.trailing_only_offset_is_reached,\r\n    },\r\n    { 'Trailing Stop positive': result.trailing_stop_positive },\r\n    {\r\n      'Trailing stop positive offset': result.trailing_stop_positive_offset,\r\n    },\r\n    { 'Custom Stoploss': result.use_custom_stoploss },\r\n    { ROI: JSON.stringify(result.minimal_roi) },\r\n    {\r\n      'Use Exit Signal':\r\n        result.use_exit_signal !== undefined ? result.use_exit_signal : result.use_sell_signal,\r\n    },\r\n    {\r\n      'Exit profit only':\r\n        result.exit_profit_only !== undefined ? result.exit_profit_only : result.sell_profit_only,\r\n    },\r\n    {\r\n      'Exit profit offset':\r\n        result.exit_profit_offset !== undefined\r\n          ? result.exit_profit_offset\r\n          : result.sell_profit_offset,\r\n    },\r\n    { 'Enable protections': result.enable_protections },\r\n    {\r\n      'Starting balance': formatPriceStake(result.starting_balance),\r\n    },\r\n    {\r\n      'Final balance': formatPriceStake(result.final_balance),\r\n    },\r\n    {\r\n      'Avg. stake amount': formatPriceStake(result.avg_stake_amount),\r\n    },\r\n    {\r\n      'Total trade volume': formatPriceStake(result.total_volume),\r\n    },\r\n  ];\r\n}\r\n","<template>\r\n  <div class=\"px-0 mw-100\">\r\n    <div class=\"d-flex justify-content-center\">\r\n      <h3>Backtest-result comparison</h3>\r\n    </div>\r\n\r\n    <!-- <div class=\"d-flex\">\r\n      <div v-for=\"[key, result] in Object.entries(backtestResults)\" :key=\"key\" class=\"border m-1\">\r\n        <BacktestResultSelectEntry :backtest-result=\"result\" />\r\n      </div>\r\n    </div> -->\r\n    <div class=\"d-flex flex-column text-start ms-0 me-2 gap-2\">\r\n      <div class=\"d-flex flex-column flex-xl-row\">\r\n        <div class=\"px-0 px-xl-0 pt-2 pt-xl-0 ps-xl-1 flex-fill\">\r\n          <b-table bordered :items=\"backtestResultStats\" :fields=\"backtestResultFields\">\r\n            <template\r\n              v-for=\"[key, result] in Object.entries(backtestResults)\"\r\n              #[`head(${key})`]\r\n              :key=\"key\"\r\n            >\r\n              <BacktestResultSelectEntry :backtest-result=\"result\" />\r\n            </template>\r\n          </b-table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { BacktestResultInMemory } from '@/types';\r\nimport { formatObjectForTable } from '@/shared/objectToTableItems';\r\n\r\nimport { generateBacktestMetricRows } from '@/shared/backtestMetrics';\r\nimport { TableField } from 'bootstrap-vue-next';\r\n\r\nconst props = defineProps({\r\n  backtestResults: { required: true, type: Object as () => Record<string, BacktestResultInMemory> },\r\n});\r\n\r\nconst backtestResultStats = computed(() => {\r\n  const values = {};\r\n  Object.entries(props.backtestResults).forEach(([key, result]) => {\r\n    const tmp = generateBacktestMetricRows(result.strategy);\r\n    values[key] = tmp;\r\n  });\r\n  console.log(values);\r\n  // return '';\r\n  return formatObjectForTable(values, 'metric');\r\n});\r\n\r\nconst backtestResultFields = computed<TableField[]>(() => {\r\n  const res = [{ key: 'metric', label: 'Metric' }];\r\n  Object.entries(props.backtestResults).forEach(([key, value]) => {\r\n    res.push({ key, label: value.metadata.strategyName });\r\n  });\r\n  return res;\r\n});\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","<script setup lang=\"ts\">\r\nimport { PeriodicBreakdown } from '@/types';\r\nimport { TableField, TableItem } from 'bootstrap-vue-next';\r\n\r\ndefineProps({\r\n  periodicBreakdown: {\r\n    type: Object as () => PeriodicBreakdown,\r\n    required: true,\r\n  },\r\n});\r\nconst periodicBreakdownSelections = [\r\n  { value: 'day', text: 'Days' },\r\n  { value: 'week', text: 'Weeks' },\r\n  { value: 'month', text: 'Months' },\r\n];\r\n\r\nconst periodicBreakdownPeriod = ref<string>('month');\r\n\r\nconst periodicBreakdownFields = computed<TableField[]>(() => {\r\n  return [\r\n    { key: 'date', label: 'Date' },\r\n    { key: 'wins', label: 'Wins' },\r\n    { key: 'draws', label: 'Draws' },\r\n    { key: 'loses', label: 'Losses' },\r\n  ];\r\n});\r\n</script>\r\n\r\n<template>\r\n  <b-form-radio-group\r\n    id=\"order-direction\"\r\n    v-model=\"periodicBreakdownPeriod\"\r\n    :options=\"periodicBreakdownSelections\"\r\n    name=\"radios-btn-default\"\r\n    size=\"sm\"\r\n    buttons\r\n    style=\"min-width: 10em\"\r\n    button-variant=\"outline-primary\"\r\n  ></b-form-radio-group>\r\n  <b-table\r\n    small\r\n    hover\r\n    stacked=\"sm\"\r\n    :items=\"periodicBreakdown[periodicBreakdownPeriod] as unknown as TableItem[]\"\r\n    :fields=\"periodicBreakdownFields\"\r\n  >\r\n  </b-table>\r\n</template>\r\n","<template>\r\n  <div class=\"px-0 mw-100\">\r\n    <div class=\"d-flex justify-content-center\">\r\n      <h3>Backtest-result for {{ backtestResult.strategy_name }}</h3>\r\n    </div>\r\n\r\n    <div class=\"d-flex flex-column text-start ms-0 me-2 gap-2\">\r\n      <div class=\"d-flex flex-column flex-xl-row\">\r\n        <div class=\"px-0 px-xl-0 pe-xl-1 flex-fill\">\r\n          <b-card header=\"Strategy settings\">\r\n            <b-table\r\n              small\r\n              borderless\r\n              :items=\"backtestResultSettings\"\r\n              :fields=\"backtestsettingFields\"\r\n            >\r\n            </b-table>\r\n          </b-card>\r\n        </div>\r\n        <div class=\"px-0 px-xl-0 pt-2 pt-xl-0 ps-xl-1 flex-fill\">\r\n          <b-card header=\"Metrics\">\r\n            <b-table small borderless :items=\"backtestResultStats\" :fields=\"backtestResultFields\">\r\n            </b-table>\r\n          </b-card>\r\n        </div>\r\n      </div>\r\n      <b-card header=\"Results per Exit-reason\">\r\n        <b-table small hover stacked=\"sm\" :items=\"exitReasonSummary\" :fields=\"perExitReason\">\r\n        </b-table>\r\n      </b-card>\r\n      <b-card header=\"Results per pair\">\r\n        <b-table small hover stacked=\"sm\" :items=\"resultsPerPair\" :fields=\"perPairFields\">\r\n        </b-table>\r\n      </b-card>\r\n      <b-card v-if=\"backtestResult.periodic_breakdown\" header=\"Periodic breakdown\">\r\n        <BacktestResultPeriodBreakdown :periodic-breakdown=\"backtestResult.periodic_breakdown\">\r\n        </BacktestResultPeriodBreakdown>\r\n      </b-card>\r\n\r\n      <b-card header=\"Single trades\">\r\n        <TradeList\r\n          :trades=\"backtestResult.trades\"\r\n          :show-filter=\"true\"\r\n          :stake-currency=\"backtestResult.stake_currency\"\r\n        />\r\n      </b-card>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { StrategyBacktestResult } from '@/types';\r\nimport { formatObjectForTable } from '@/shared/objectToTableItems';\r\n\r\nimport { formatPercent, formatPrice } from '@/shared/formatters';\r\nimport { generateBacktestMetricRows, generateBacktestSettingRows } from '@/shared/backtestMetrics';\r\nimport { TableField, TableItem } from 'bootstrap-vue-next';\r\n\r\nconst props = defineProps({\r\n  backtestResult: { required: true, type: Object as () => StrategyBacktestResult },\r\n});\r\n\r\nconst backtestResultStats = computed(() => {\r\n  const tmp = generateBacktestMetricRows(props.backtestResult);\r\n  return formatObjectForTable({ value: tmp }, 'metric');\r\n});\r\n\r\nconst backtestResultSettings = computed(() => {\r\n  // Transpose Result into readable format\r\n  const tmp = generateBacktestSettingRows(props.backtestResult);\r\n\r\n  return formatObjectForTable({ value: tmp }, 'setting');\r\n});\r\n\r\nconst resultsPerPair = computed(\r\n  () => props.backtestResult.results_per_pair as unknown as TableItem[],\r\n);\r\nconst exitReasonSummary = computed(\r\n  () =>\r\n    (props.backtestResult.exit_reason_summary ||\r\n      props.backtestResult.sell_reason_summary) as unknown as TableItem[],\r\n);\r\n\r\nconst perPairFields = computed(() => {\r\n  return [\r\n    { key: 'key', label: 'Pair' },\r\n    { key: 'trades', label: 'Buys' },\r\n    {\r\n      key: 'profit_mean',\r\n      label: 'Avg Profit %',\r\n      formatter: (value) => formatPercent(value, 2),\r\n    },\r\n    { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\r\n    {\r\n      key: 'profit_total_abs',\r\n      label: `Tot Profit ${props.backtestResult.stake_currency}`,\r\n      formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\r\n    },\r\n    {\r\n      key: 'profit_total',\r\n      label: 'Tot Profit %',\r\n      formatter: (value) => formatPercent(value, 2),\r\n    },\r\n    { key: 'duration_avg', label: 'Avg Duration' },\r\n    { key: 'wins', label: 'Wins' },\r\n    { key: 'draws', label: 'Draws' },\r\n    { key: 'losses', label: 'Losses' },\r\n  ];\r\n});\r\n\r\nconst perExitReason = computed(() => {\r\n  return [\r\n    { key: 'exit_reason', label: 'Exit Reason' },\r\n    { key: 'trades', label: 'Buys' },\r\n    {\r\n      key: 'profit_mean',\r\n      label: 'Avg Profit %',\r\n      formatter: (value) => formatPercent(value, 2),\r\n    },\r\n    { key: 'profit_sum', label: 'Cum Profit %', formatter: (value) => formatPercent(value, 2) },\r\n    {\r\n      key: 'profit_total_abs',\r\n      label: `Tot Profit ${props.backtestResult.stake_currency}`,\r\n\r\n      formatter: (value) => formatPrice(value, props.backtestResult.stake_currency_decimals),\r\n    },\r\n    {\r\n      key: 'profit_total',\r\n      label: 'Tot Profit %',\r\n      formatter: (value) => formatPercent(value, 2),\r\n    },\r\n    { key: 'wins', label: 'Wins' },\r\n    { key: 'draws', label: 'Draws' },\r\n    { key: 'losses', label: 'Losses' },\r\n  ];\r\n});\r\nconst backtestResultFields: TableField[] = [\r\n  { key: 'metric', label: 'Metric' },\r\n  { key: 'value', label: 'Value' },\r\n];\r\n\r\nconst backtestsettingFields: TableField[] = [\r\n  { key: 'setting', label: 'Setting' },\r\n  { key: 'value', label: 'Value' },\r\n];\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","<template>\r\n  <div>\r\n    <div class=\"w-100 d-flex\">\r\n      <b-form-select\r\n        id=\"freqaiModel-select\"\r\n        v-model=\"locFreqaiModel\"\r\n        :options=\"botStore.activeBot.freqaiModelList\"\r\n      >\r\n      </b-form-select>\r\n      <div class=\"ms-2\">\r\n        <b-button @click=\"botStore.activeBot.getFreqAIModelList\">\r\n          <i-mdi-refresh />\r\n        </b-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst props = defineProps({\r\n  modelValue: { type: String, required: true },\r\n});\r\nconst emit = defineEmits(['update:modelValue']);\r\nconst botStore = useBotStore();\r\n\r\nconst locFreqaiModel = computed({\r\n  get() {\r\n    return props.modelValue;\r\n  },\r\n  set(freqaiModel: string) {\r\n    emit('update:modelValue', freqaiModel);\r\n  },\r\n});\r\n\r\nonMounted(() => {\r\n  if (botStore.activeBot.freqaiModelList.length === 0) {\r\n    botStore.activeBot.getFreqAIModelList();\r\n  }\r\n});\r\n</script>\r\n","import { defineStore } from 'pinia';\r\n\r\nexport const useBtStore = defineStore('btStore', {\r\n  state: () => {\r\n    return {\r\n      strategy: '',\r\n      selectedTimeframe: '',\r\n      selectedDetailTimeframe: '',\r\n      timerange: '',\r\n      maxOpenTrades: '',\r\n      stakeAmount: '',\r\n      startingCapital: '',\r\n      allowCache: true,\r\n      enableProtections: false,\r\n      stakeAmountUnlimited: false,\r\n      freqAI: {\r\n        enabled: false,\r\n        model: '',\r\n        identifier: '',\r\n      },\r\n    };\r\n  },\r\n  getters: {\r\n    canRunBacktest: (state) => state.strategy !== '',\r\n  },\r\n  actions: {},\r\n});\r\n","<template>\r\n  <div class=\"mb-2\">\r\n    <span>Strategy</span>\r\n    <StrategySelect v-model=\"btStore.strategy\"></StrategySelect>\r\n  </div>\r\n  <b-card :disabled=\"botStore.activeBot.backtestRunning\">\r\n    <!-- Backtesting parameters -->\r\n    <b-form-group\r\n      label-cols-lg=\"2\"\r\n      label=\"Backtest params\"\r\n      label-size=\"sm\"\r\n      label-class=\"fw-bold pt-0\"\r\n      class=\"mb-0\"\r\n    >\r\n      <b-form-group\r\n        label-cols-sm=\"5\"\r\n        label=\"Timeframe:\"\r\n        label-align-sm=\"right\"\r\n        label-for=\"timeframe-select\"\r\n      >\r\n        <TimeframeSelect id=\"timeframe-select\" v-model=\"btStore.selectedTimeframe\" />\r\n      </b-form-group>\r\n      <b-form-group\r\n        label-cols-sm=\"5\"\r\n        label=\"Detail Timeframe:\"\r\n        label-align-sm=\"right\"\r\n        label-for=\"timeframe-detail-select\"\r\n        title=\"Detail timeframe, to simulate intra-candle results. Not setting this will not use this functionality.\"\r\n      >\r\n        <TimeframeSelect\r\n          id=\"timeframe-detail-select\"\r\n          v-model=\"btStore.selectedDetailTimeframe\"\r\n          :below-timeframe=\"btStore.selectedTimeframe\"\r\n        />\r\n      </b-form-group>\r\n\r\n      <b-form-group\r\n        label-cols-sm=\"5\"\r\n        label=\"Max open trades:\"\r\n        label-align-sm=\"right\"\r\n        label-for=\"max-open-trades\"\r\n      >\r\n        <b-form-input\r\n          id=\"max-open-trades\"\r\n          v-model=\"btStore.maxOpenTrades\"\r\n          placeholder=\"Use strategy default\"\r\n          type=\"number\"\r\n        ></b-form-input>\r\n      </b-form-group>\r\n      <b-form-group\r\n        label-cols-sm=\"5\"\r\n        label=\"Starting capital:\"\r\n        label-align-sm=\"right\"\r\n        label-for=\"starting-capital\"\r\n      >\r\n        <b-form-input\r\n          id=\"starting-capital\"\r\n          v-model=\"btStore.startingCapital\"\r\n          placeholder=\"Use config default\"\r\n          type=\"number\"\r\n          step=\"0.001\"\r\n        ></b-form-input>\r\n      </b-form-group>\r\n      <b-form-group\r\n        label-cols-sm=\"5\"\r\n        label=\"Stake amount:\"\r\n        label-align-sm=\"right\"\r\n        label-for=\"stake-amount\"\r\n      >\r\n        <div class=\"d-flex align-items-center\">\r\n          <div style=\"flex-basis: 100%\" class=\"d-flex\">\r\n            <b-form-checkbox id=\"stake-amount-bool\" v-model=\"btStore.stakeAmountUnlimited\"\r\n              >Unlimited stake</b-form-checkbox\r\n            >\r\n          </div>\r\n          <b-form-input\r\n            id=\"stake-amount\"\r\n            v-model=\"btStore.stakeAmount\"\r\n            type=\"number\"\r\n            placeholder=\"Use strategy default\"\r\n            step=\"0.01\"\r\n            style=\"flex-basis: 100%\"\r\n            :disabled=\"btStore.stakeAmountUnlimited\"\r\n          ></b-form-input>\r\n        </div>\r\n      </b-form-group>\r\n\r\n      <b-form-group\r\n        label-cols-sm=\"5\"\r\n        label=\"Enable Protections:\"\r\n        label-align-sm=\"right\"\r\n        label-for=\"enable-protections\"\r\n        class=\"align-items-center\"\r\n      >\r\n        <b-form-checkbox\r\n          id=\"enable-protections\"\r\n          v-model=\"btStore.enableProtections\"\r\n        ></b-form-checkbox>\r\n      </b-form-group>\r\n      <b-form-group\r\n        v-if=\"botStore.activeBot.botApiVersion >= 2.22\"\r\n        label-cols-sm=\"5\"\r\n        label=\"Cache Backtest results:\"\r\n        label-align-sm=\"right\"\r\n        label-for=\"enable-cache\"\r\n        class=\"align-items-center\"\r\n      >\r\n        <b-form-checkbox id=\"enable-cache\" v-model=\"btStore.allowCache\"></b-form-checkbox>\r\n      </b-form-group>\r\n      <template v-if=\"botStore.activeBot.botApiVersion >= 2.22\">\r\n        <b-form-group\r\n          label-cols-sm=\"5\"\r\n          label=\"Enable FreqAI:\"\r\n          label-align-sm=\"right\"\r\n          label-for=\"enable-freqai\"\r\n          class=\"align-items-center\"\r\n        >\r\n          <template #label>\r\n            <div class=\"d-flex justify-content-center\">\r\n              <span class=\"me-2\">Enable FreqAI:</span>\r\n              <InfoBox\r\n                hint=\"Assumes freqAI configuration is setup in the configuration, and the strategy is a freqAI strategy. Will fail if that's not the case.\"\r\n              />\r\n            </div>\r\n          </template>\r\n          <b-form-checkbox id=\"enable-freqai\" v-model=\"btStore.freqAI.enabled\"></b-form-checkbox>\r\n        </b-form-group>\r\n        <b-form-group\r\n          v-if=\"btStore.freqAI.enabled\"\r\n          label-cols-sm=\"5\"\r\n          label=\"FreqAI identifier:\"\r\n          label-align-sm=\"right\"\r\n          label-for=\"freqai-identifier\"\r\n        >\r\n          <b-form-input\r\n            id=\"freqai-identifier\"\r\n            v-model=\"btStore.freqAI.identifier\"\r\n            placeholder=\"Use config default\"\r\n          ></b-form-input>\r\n        </b-form-group>\r\n        <b-form-group\r\n          v-if=\"btStore.freqAI.enabled\"\r\n          label-cols-sm=\"5\"\r\n          label=\"FreqAI Model\"\r\n          label-align-sm=\"right\"\r\n          label-for=\"freqai-model\"\r\n        >\r\n          <FreqaiModelSelect id=\"freqai-model\" v-model=\"btStore.freqAI.model\"></FreqaiModelSelect>\r\n        </b-form-group>\r\n      </template>\r\n\r\n      <!-- <b-form-group label-cols-sm=\"5\" label=\"Fee:\" label-align-sm=\"right\" label-for=\"fee\">\r\n              <b-form-input\r\n                id=\"fee\"\r\n                type=\"number\"\r\n                placeholder=\"Use exchange default\"\r\n                step=\"0.01\"\r\n              ></b-form-input>\r\n            </b-form-group> -->\r\n      <hr />\r\n      <TimeRangeSelect v-model=\"btStore.timerange\" class=\"mt-2\"></TimeRangeSelect>\r\n    </b-form-group>\r\n  </b-card>\r\n\r\n  <h3 class=\"mt-3\">Backtesting summary</h3>\r\n  <div class=\"d-flex flex-wrap flex-md-nowrap justify-content-between justify-content-md-center\">\r\n    <b-button\r\n      id=\"start-backtest\"\r\n      variant=\"primary\"\r\n      :disabled=\"\r\n        !btStore.canRunBacktest ||\r\n        botStore.activeBot.backtestRunning ||\r\n        !botStore.activeBot.canRunBacktest\r\n      \"\r\n      class=\"mx-1\"\r\n      @click=\"clickBacktest\"\r\n    >\r\n      Start backtest\r\n    </b-button>\r\n    <b-button\r\n      variant=\"secondary\"\r\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\r\n      class=\"mx-1\"\r\n      @click=\"botStore.activeBot.pollBacktest\"\r\n    >\r\n      Load backtest result\r\n    </b-button>\r\n    <b-button\r\n      variant=\"secondary\"\r\n      class=\"mx-1\"\r\n      :disabled=\"!botStore.activeBot.backtestRunning\"\r\n      @click=\"botStore.activeBot.stopBacktest\"\r\n      >Stop Backtest</b-button\r\n    >\r\n    <b-button\r\n      variant=\"secondary\"\r\n      class=\"mx-1\"\r\n      :disabled=\"botStore.activeBot.backtestRunning || !botStore.activeBot.canRunBacktest\"\r\n      @click=\"botStore.activeBot.removeBacktest\"\r\n      >Reset Backtest</b-button\r\n    >\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { BacktestPayload } from '@/types';\r\n\r\nimport { useBtStore } from '@/stores/btStore';\r\nconst botStore = useBotStore();\r\nconst btStore = useBtStore();\r\n\r\nfunction clickBacktest() {\r\n  const btPayload: BacktestPayload = {\r\n    strategy: btStore.strategy,\r\n    timerange: btStore.timerange,\r\n    enable_protections: btStore.enableProtections,\r\n  };\r\n  const openTradesInt = parseInt(btStore.maxOpenTrades, 10);\r\n  if (openTradesInt) {\r\n    btPayload.max_open_trades = openTradesInt;\r\n  }\r\n  if (btStore.stakeAmountUnlimited) {\r\n    btPayload.stake_amount = 'unlimited';\r\n  } else {\r\n    const stakeAmountLoc = Number(btStore.stakeAmount);\r\n    if (stakeAmountLoc) {\r\n      btPayload.stake_amount = stakeAmountLoc.toString();\r\n    }\r\n  }\r\n\r\n  const startingCapitalLoc = Number(btStore.startingCapital);\r\n  if (startingCapitalLoc) {\r\n    btPayload.dry_run_wallet = startingCapitalLoc;\r\n  }\r\n\r\n  if (btStore.selectedTimeframe) {\r\n    btPayload.timeframe = btStore.selectedTimeframe;\r\n  }\r\n  if (btStore.selectedDetailTimeframe) {\r\n    btPayload.timeframe_detail = btStore.selectedDetailTimeframe;\r\n  }\r\n  if (!btStore.allowCache) {\r\n    btPayload.backtest_cache = 'none';\r\n  }\r\n  if (btStore.freqAI.enabled) {\r\n    btPayload.freqaimodel = btStore.freqAI.model;\r\n    if (btStore.freqAI.identifier !== '') {\r\n      btPayload.freqai = { identifier: btStore.freqAI.identifier };\r\n    }\r\n  }\r\n\r\n  botStore.activeBot.startBacktest(btPayload);\r\n}\r\n</script>\r\n\r\n<style scoped></style>\r\n","<template>\r\n  <div>\r\n    <button\r\n      class=\"btn btn-secondary float-end\"\r\n      title=\"Refresh\"\r\n      aria-label=\"Refresh\"\r\n      @click=\"botStore.activeBot.getBacktestHistory\"\r\n    >\r\n      <i-mdi-refresh />\r\n    </button>\r\n    <p>\r\n      Load Historic results from disk. You can click on multiple results to load all of them into\r\n      freqUI.\r\n    </p>\r\n    <BTableSimple\r\n      v-if=\"botStore.activeBot.backtestHistoryList.length > 0\"\r\n      responsive\r\n      small\r\n      class=\"rounded-1 table-rounded-corners\"\r\n    >\r\n      <BThead>\r\n        <BTr>\r\n          <BTh>Strategy</BTh>\r\n          <BTh>Details</BTh>\r\n          <BTh>Backtest Time</BTh>\r\n          <BTh>Filename</BTh>\r\n          <BTh>Actions</BTh>\r\n        </BTr>\r\n      </BThead>\r\n      <BTbody>\r\n        <BTr\r\n          v-for=\"(res, idx) in botStore.activeBot.backtestHistoryList\"\r\n          :key=\"idx\"\r\n          role=\"button\"\r\n          @click=\"botStore.activeBot.getBacktestHistoryResult(res)\"\r\n        >\r\n          <BTd>{{ res.strategy }}</BTd>\r\n          <BTd>\r\n            <strong>{{ res.timeframe }}</strong>\r\n            <span v-if=\"res.backtest_start_ts && res.backtest_end_ts\" class=\"ms-1\">\r\n              {{ timestampToTimeRangeString(res.backtest_start_ts * 1000) }}-{{\r\n                timestampToTimeRangeString(res.backtest_end_ts * 1000)\r\n              }}</span\r\n            >\r\n          </BTd>\r\n          <BTd\r\n            ><small>{{ timestampms(res.backtest_start_time * 1000) }}</small></BTd\r\n          >\r\n          <BTd>\r\n            <small>{{ res.filename }}</small>\r\n          </BTd>\r\n          <BTd>\r\n            <div class=\"d-flex align-items-center\">\r\n              <InfoBox\r\n                v-if=\"botStore.activeBot.botApiVersion >= 2.32\"\r\n                :class=\"res.notes ? 'opacity-100' : 'opacity-0'\"\r\n                :hint=\"res.notes ?? ''\"\r\n              ></InfoBox>\r\n              <b-button\r\n                v-if=\"botStore.activeBot.botApiVersion >= 2.31\"\r\n                class=\"ms-1\"\r\n                size=\"sm\"\r\n                title=\"Load this Result.\"\r\n                :disabled=\"res.run_id in botStore.activeBot.backtestHistory\"\r\n                @click.stop=\"botStore.activeBot.getBacktestHistoryResult(res)\"\r\n              >\r\n                <i-mdi-arrow-right />\r\n              </b-button>\r\n              <b-button\r\n                v-if=\"botStore.activeBot.botApiVersion >= 2.31\"\r\n                class=\"ms-1\"\r\n                size=\"sm\"\r\n                title=\"Delete this Result.\"\r\n                :disabled=\"res.run_id in botStore.activeBot.backtestHistory\"\r\n                @click.stop=\"deleteBacktestResult(res)\"\r\n              >\r\n                <i-mdi-delete />\r\n              </b-button>\r\n            </div>\r\n          </BTd>\r\n        </BTr>\r\n      </BTbody>\r\n    </BTableSimple>\r\n  </div>\r\n  <MessageBox ref=\"msgBox\" />\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport MessageBox, { MsgBoxObject } from '@/components/general/MessageBox.vue';\r\nimport { timestampms, timestampToTimeRangeString } from '@/shared/formatters';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\nimport { BacktestHistoryEntry } from '@/types';\r\nimport InfoBox from '../general/InfoBox.vue';\r\n\r\nconst botStore = useBotStore();\r\nconst msgBox = ref<typeof MessageBox>();\r\n\r\nonMounted(() => {\r\n  botStore.activeBot.getBacktestHistory();\r\n});\r\n\r\nfunction deleteBacktestResult(result: BacktestHistoryEntry) {\r\n  const msg: MsgBoxObject = {\r\n    title: 'Delete result',\r\n    message: `Delete result ${result.filename} from disk?`,\r\n    accept: () => {\r\n      botStore.activeBot.deleteBacktestHistoryResult(result);\r\n    },\r\n  };\r\n  msgBox.value?.show(msg);\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.table-rounded-corners {\r\n  box-shadow: 0 0 0 1px var(--bs-border-color);\r\n  overflow: hidden;\r\n  vertical-align: middle;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"container d-flex flex-column align-items-stretch\">\r\n    <h3>Available results:</h3>\r\n    <b-list-group class=\"ms-2\">\r\n      <b-list-group-item\r\n        v-for=\"[key, result] in Object.entries(backtestHistory)\"\r\n        :key=\"key\"\r\n        button\r\n        :active=\"key === selectedBacktestResultKey\"\r\n        class=\"d-flex justify-content-between align-items-center py-1 pe-1\"\r\n        @click=\"setBacktestResult(key)\"\r\n      >\r\n        <template v-if=\"!result.metadata.editing\">\r\n          <BacktestResultSelectEntry :backtest-result=\"result\" />\r\n          <div class=\"d-flex\">\r\n            <b-button\r\n              v-if=\"canUseModify\"\r\n              class=\"flex-nowrap\"\r\n              size=\"sm\"\r\n              title=\"Modify result notes.\"\r\n              @click.stop=\"result.metadata.editing = !result.metadata.editing\"\r\n            >\r\n              <i-mdi-pencil />\r\n            </b-button>\r\n            <b-button\r\n              size=\"sm\"\r\n              class=\"flex-nowrap\"\r\n              title=\"Delete this Result from UI.\"\r\n              @click.stop=\"emit('removeResult', key)\"\r\n            >\r\n              <i-mdi-delete />\r\n            </b-button>\r\n          </div>\r\n        </template>\r\n        <template v-if=\"result.metadata.editing\">\r\n          <b-form-textarea v-model=\"result.metadata.notes\" placeholder=\"notes\" size=\"sm\">\r\n          </b-form-textarea>\r\n\r\n          <b-button size=\"sm\" title=\"Confirm\" @click.stop=\"confirmInput(key, result)\">\r\n            <i-mdi-check />\r\n          </b-button>\r\n        </template>\r\n      </b-list-group-item>\r\n    </b-list-group>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { BacktestResultInMemory, BacktestResultUpdate } from '@/types';\r\n\r\ndefineProps({\r\n  backtestHistory: {\r\n    required: true,\r\n    type: Object as () => Record<string, BacktestResultInMemory>,\r\n  },\r\n  selectedBacktestResultKey: { required: false, default: '', type: String },\r\n  canUseModify: { required: false, default: false, type: Boolean },\r\n});\r\nconst emit = defineEmits<{\r\n  selectionChange: [value: string];\r\n  removeResult: [value: string];\r\n  updateResult: [value: BacktestResultUpdate];\r\n}>();\r\n\r\nconst setBacktestResult = (key: string) => {\r\n  emit('selectionChange', key);\r\n};\r\n\r\nfunction confirmInput(run_id: string, result: BacktestResultInMemory) {\r\n  result.metadata.editing = !result.metadata.editing;\r\n  if (result.metadata.filename) {\r\n    emit('updateResult', {\r\n      run_id: run_id,\r\n      notes: result.metadata.notes ?? '',\r\n      filename: result.metadata.filename,\r\n      strategy: result.metadata.strategyName,\r\n    });\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped></style>\r\n","<template>\r\n  <div class=\"d-flex flex-column pt-1 me-1\" style=\"height: calc(100vh - 60px)\">\r\n    <div>\r\n      <div class=\"d-flex flex-row\">\r\n        <h2 class=\"ms-5\">Backtesting</h2>\r\n        <p v-if=\"!botStore.activeBot.canRunBacktest\">\r\n          Bot must be in webserver mode to enable Backtesting.\r\n        </p>\r\n        <div class=\"w-100\">\r\n          <div\r\n            class=\"mx-md-5 d-flex flex-wrap justify-content-md-center justify-content-between mb-4 gap-2\"\r\n          >\r\n            <b-form-radio\r\n              v-if=\"botStore.activeBot.botApiVersion >= 2.15\"\r\n              v-model=\"btFormMode\"\r\n              name=\"bt-form-radios\"\r\n              button\r\n              class=\"mx-1 flex-samesize-items\"\r\n              value=\"historicResults\"\r\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\r\n              ><i-mdi-cloud-download class=\"me-2\" />Load Results</b-form-radio\r\n            >\r\n            <b-form-radio\r\n              v-model=\"btFormMode\"\r\n              name=\"bt-form-radios\"\r\n              button\r\n              class=\"mx-1 flex-samesize-items\"\r\n              value=\"run\"\r\n              :disabled=\"!botStore.activeBot.canRunBacktest\"\r\n              ><i-mdi-run-fast class=\"me-2\" />Run backtest</b-form-radio\r\n            >\r\n            <b-form-radio\r\n              id=\"bt-analyze-btn\"\r\n              v-model=\"btFormMode\"\r\n              name=\"bt-form-radios\"\r\n              button\r\n              class=\"mx-1 flex-samesize-items\"\r\n              value=\"results\"\r\n              :disabled=\"!hasBacktestResult\"\r\n              ><i-mdi-table-eye class=\"me-2\" />Analyze result</b-form-radio\r\n            >\r\n            <b-form-radio\r\n              v-if=\"hasMultiBacktestResult\"\r\n              v-model=\"btFormMode\"\r\n              name=\"bt-form-radios\"\r\n              button\r\n              class=\"mx-1 flex-samesize-items\"\r\n              value=\"compare-results\"\r\n              :disabled=\"!hasMultiBacktestResult\"\r\n              ><i-mdi-compare-horizontal class=\"me-2\" />Compare results</b-form-radio\r\n            >\r\n            <b-form-radio\r\n              v-model=\"btFormMode\"\r\n              name=\"bt-form-radios\"\r\n              button\r\n              class=\"mx-1 flex-samesize-items\"\r\n              value=\"visualize-summary\"\r\n              :disabled=\"!hasBacktestResult\"\r\n              ><i-mdi-chart-bell-curve-cumulative class=\"me-2\" />Visualize summary</b-form-radio\r\n            >\r\n            <b-form-radio\r\n              v-model=\"btFormMode\"\r\n              name=\"bt-form-radios\"\r\n              button\r\n              class=\"mx-1 flex-samesize-items\"\r\n              value=\"visualize\"\r\n              :disabled=\"!hasBacktestResult\"\r\n              ><i-mdi-chart-timeline-variant-shimmer class=\"me-2\" />Visualize result</b-form-radio\r\n            >\r\n          </div>\r\n          <small v-show=\"botStore.activeBot.backtestRunning\" class=\"text-end bt-running-label\"\r\n            >Backtest running: {{ botStore.activeBot.backtestStep }}\r\n            {{ formatPercent(botStore.activeBot.backtestProgress, 2) }}</small\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"d-flex flex-md-row\">\r\n      <!-- Left bar -->\r\n      <div\r\n        v-if=\"btFormMode !== 'visualize'\"\r\n        :class=\"`${showLeftBar ? 'col-md-3' : ''}`\"\r\n        class=\"sticky-top sticky-offset me-3 d-flex flex-column absolute\"\r\n        style=\"max-height: calc(100vh - 60px)\"\r\n      >\r\n        <b-button\r\n          class=\"align-self-start\"\r\n          aria-label=\"Close\"\r\n          size=\"sm\"\r\n          variant=\"outline-secondary\"\r\n          @click=\"showLeftBar = !showLeftBar\"\r\n        >\r\n          <i-mdi-chevron-right v-if=\"!showLeftBar\" width=\"24\" height=\"24\" />\r\n          <i-mdi-chevron-left v-if=\"showLeftBar\" width=\"24\" height=\"24\" />\r\n        </b-button>\r\n        <transition name=\"fade\">\r\n          <BacktestResultSelect\r\n            v-if=\"showLeftBar\"\r\n            :backtest-history=\"botStore.activeBot.backtestHistory\"\r\n            :selected-backtest-result-key=\"botStore.activeBot.selectedBacktestResultKey\"\r\n            :can-use-modify=\"botStore.activeBot.botApiVersion >= 2.32\"\r\n            @selection-change=\"botStore.activeBot.setBacktestResultKey\"\r\n            @remove-result=\"botStore.activeBot.removeBacktestResultFromMemory\"\r\n            @update-result=\"botStore.activeBot.saveBacktestResultMetadata\"\r\n          />\r\n        </transition>\r\n      </div>\r\n      <!-- End Left bar -->\r\n      <div class=\"d-flex flex-column flex-fill mw-100\">\r\n        <div class=\"d-md-flex\">\r\n          <div\r\n            v-if=\"btFormMode === 'historicResults'\"\r\n            class=\"flex-fill d-flex flex-column bt-config\"\r\n          >\r\n            <BacktestHistoryLoad />\r\n          </div>\r\n          <div v-if=\"btFormMode === 'run'\" class=\"flex-fill d-flex flex-column bt-config\">\r\n            <BacktestRun />\r\n          </div>\r\n          <BacktestResultAnalysis\r\n            v-if=\"hasBacktestResult && btFormMode === 'results'\"\r\n            :backtest-result=\"botStore.activeBot.selectedBacktestResult\"\r\n            class=\"flex-fill\"\r\n          />\r\n\r\n          <BacktestResultComparison\r\n            v-if=\"hasBacktestResult && btFormMode === 'compare-results'\"\r\n            :backtest-results=\"botStore.activeBot.backtestHistory\"\r\n            class=\"flex-fill\"\r\n          />\r\n\r\n          <BacktestGraphs\r\n            v-if=\"hasBacktestResult && btFormMode === 'visualize-summary'\"\r\n            :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\r\n            class=\"flex-fill\"\r\n          />\r\n        </div>\r\n\r\n        <div v-if=\"hasBacktestResult && btFormMode === 'visualize'\" class=\"text-center w-100 mt-2\">\r\n          <BacktestResultChart\r\n            :timeframe=\"timeframe\"\r\n            :strategy=\"btStore.strategy\"\r\n            :timerange=\"btStore.timerange\"\r\n            :pairlist=\"botStore.activeBot.selectedBacktestResult.pairlist\"\r\n            :trades=\"botStore.activeBot.selectedBacktestResult.trades\"\r\n            :freqai-model=\"btStore.freqAI.enabled ? btStore.freqAI.model : undefined\"\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { formatPercent } from '@/shared/formatters';\r\nimport { useBtStore } from '@/stores/btStore';\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nenum BtRunModes {\r\n  run = 'run',\r\n  results = 'results',\r\n  visualize = 'visualize',\r\n  visualizesummary = 'visualize-summary',\r\n  compareresults = 'compare-results',\r\n  historicresults = 'historicResults',\r\n}\r\n\r\nconst botStore = useBotStore();\r\nconst btStore = useBtStore();\r\n\r\nconst hasBacktestResult = computed(() =>\r\n  botStore.activeBot.backtestHistory\r\n    ? Object.keys(botStore.activeBot.backtestHistory).length !== 0\r\n    : false,\r\n);\r\nconst hasMultiBacktestResult = computed(() =>\r\n  botStore.activeBot.backtestHistory\r\n    ? Object.keys(botStore.activeBot.backtestHistory).length > 1\r\n    : false,\r\n);\r\n\r\nconst timeframe = computed((): string => {\r\n  try {\r\n    return botStore.activeBot.selectedBacktestResult.timeframe;\r\n  } catch (err) {\r\n    return '';\r\n  }\r\n});\r\n\r\nconst showLeftBar = ref(false);\r\n\r\nconst btFormMode = ref<BtRunModes>(BtRunModes.run);\r\nconst pollInterval = ref<number | null>(null);\r\n\r\nconst selectBacktestResult = () => {\r\n  // Set parameters for this result\r\n  btStore.strategy = botStore.activeBot.selectedBacktestResult.strategy_name;\r\n  botStore.activeBot.getStrategy(btStore.strategy);\r\n  btStore.selectedTimeframe = botStore.activeBot.selectedBacktestResult.timeframe;\r\n  btStore.selectedDetailTimeframe =\r\n    botStore.activeBot.selectedBacktestResult.timeframe_detail || '';\r\n  // TODO: maybe this should not use timerange, but the actual backtest start/end results instead?\r\n  btStore.timerange = botStore.activeBot.selectedBacktestResult.timerange;\r\n};\r\n\r\nwatch(\r\n  () => botStore.activeBot.selectedBacktestResultKey,\r\n  () => {\r\n    selectBacktestResult();\r\n  },\r\n);\r\n\r\nonMounted(() => botStore.activeBot.getState());\r\nwatch(\r\n  () => botStore.activeBot.backtestRunning,\r\n  () => {\r\n    if (botStore.activeBot.backtestRunning === true) {\r\n      pollInterval.value = window.setInterval(botStore.activeBot.pollBacktest, 1000);\r\n    } else if (pollInterval.value) {\r\n      clearInterval(pollInterval.value);\r\n      pollInterval.value = null;\r\n    }\r\n  },\r\n);\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.bt-running-label {\r\n  position: absolute;\r\n  right: 2em;\r\n  margin-top: 1em;\r\n}\r\n\r\n.sticky-offset {\r\n  top: 2em;\r\n}\r\n.flex-samesize-items {\r\n  flex: 1 1 0;\r\n  @media md {\r\n    flex: unset;\r\n  }\r\n}\r\n\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: all 0.2s;\r\n}\r\n\r\n.fade-enter,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n\r\n.bt-config {\r\n  @media (min-width: 992px) {\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    max-width: 75vw;\r\n  }\r\n}\r\n</style>\r\n"],"names":["props","__props","emit","__emit","botStore","useBotStore","selectedTrade","ref","sortNewestFirst","onTradeSelect","trade","sortedTrades","computed","a","b","ordersVisible","watch","isBarVisible","sliderPosition","navigateChartToTrade","formatObjectForTable","originalobj","valueKey","acc","key","value","item","metric","val","existingItem","i","getSortedTrades","trades","getBestPair","formatPercent","getWorstPair","useFormatPriceStake","stake_currency_decimals","stake_currency","price","formatPrice","generateBacktestMetricRows","result","bestPair","worstPair","pairSummary","formatPriceStake","shortMetrics","isNotUndefined","humanizeDurationFromSeconds","timestampms","generateBacktestSettingRows","backtestResultStats","values","tmp","backtestResultFields","res","periodicBreakdownSelections","periodicBreakdownPeriod","periodicBreakdownFields","backtestResultSettings","resultsPerPair","exitReasonSummary","perPairFields","perExitReason","backtestsettingFields","locFreqaiModel","freqaiModel","onMounted","useBtStore","defineStore","state","btStore","clickBacktest","btPayload","openTradesInt","stakeAmountLoc","startingCapitalLoc","msgBox","deleteBacktestResult","msg","_a","setBacktestResult","confirmInput","run_id","hasBacktestResult","hasMultiBacktestResult","timeframe","showLeftBar","btFormMode","pollInterval","selectBacktestResult"],"mappings":"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"}