{"version":3,"file":"ChartsView-glfHWVpe.js","sources":["../../src/views/ChartsView.vue"],"sourcesContent":["<template>\r\n  <div class=\"d-flex flex-column h-100\">\r\n    <!-- <div v-if=\"isWebserverMode\" class=\"me-auto ms-3\"> -->\r\n    <!-- Currently only available in Webserver mode -->\r\n    <!-- <b-form-checkbox v-model=\"historicView\">HistoricData</b-form-checkbox> -->\r\n    <!-- </div> -->\r\n    <div v-if=\"botStore.activeBot.isWebserverMode\" class=\"mx-md-3 mt-2\">\r\n      <div class=\"d-flex flex-wrap mx-1 gap-1 gap-md-2\">\r\n        <div class=\"col-12 col-md-3 text-start me-md-1\">\r\n          <span>Strategy</span>\r\n          <StrategySelect v-model=\"strategy\" class=\"mt-1\"></StrategySelect>\r\n        </div>\r\n        <div class=\"col-12 col-md-3 text-start\">\r\n          <span>Timeframe</span>\r\n          <TimeframeSelect v-model=\"selectedTimeframe\" class=\"mt-1\" />\r\n        </div>\r\n        <TimeRangeSelect v-model=\"timerange\"></TimeRangeSelect>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"mx-md-2 mt-2 pb-1 h-100\">\r\n      <CandleChartContainer\r\n        :available-pairs=\"availablePairs\"\r\n        :historic-view=\"botStore.activeBot.isWebserverMode\"\r\n        :timeframe=\"finalTimeframe\"\r\n        :trades=\"botStore.activeBot.trades\"\r\n        :timerange=\"botStore.activeBot.isWebserverMode ? timerange : ''\"\r\n        :strategy=\"botStore.activeBot.isWebserverMode ? strategy : ''\"\r\n        :plot-config-modal=\"false\"\r\n      >\r\n      </CandleChartContainer>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { useBotStore } from '@/stores/ftbotwrapper';\r\n\r\nconst botStore = useBotStore();\r\nconst strategy = ref('');\r\nconst timerange = ref('');\r\nconst selectedTimeframe = ref('');\r\n\r\nconst finalTimeframe = computed<string>(() => {\r\n  return botStore.activeBot.isWebserverMode\r\n    ? selectedTimeframe.value || botStore.activeBot.strategy.timeframe || ''\r\n    : botStore.activeBot.timeframe;\r\n});\r\n\r\nconst availablePairs = computed<string[]>(() => {\r\n  if (botStore.activeBot.isWebserverMode) {\r\n    if (finalTimeframe.value && finalTimeframe.value !== '') {\r\n      const tf = finalTimeframe.value;\r\n      return botStore.activeBot.pairlistWithTimeframe\r\n        .filter(([pair, timeframe]) => {\r\n          console.log(pair, timeframe, tf);\r\n          return timeframe === tf;\r\n        })\r\n        .map(([pair]) => pair);\r\n    }\r\n    return botStore.activeBot.pairlist;\r\n  }\r\n  return botStore.activeBot.whitelist;\r\n});\r\n\r\nonMounted(() => {\r\n  if (botStore.activeBot.isWebserverMode) {\r\n    // this.refresh();\r\n    botStore.activeBot.getAvailablePairs({ timeframe: botStore.activeBot.timeframe });\r\n    // .then((val) => {\r\n    // console.log(val);\r\n    // });\r\n  } else if (!botStore.activeBot.whitelist || botStore.activeBot.whitelist.length === 0) {\r\n    botStore.activeBot.getWhitelist();\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped></style>\r\n"],"names":["botStore","useBotStore","strategy","ref","timerange","selectedTimeframe","finalTimeframe","computed","availablePairs","tf","pair","timeframe","onMounted"],"mappings":"u0BAsCA,MAAMA,EAAWC,IACXC,EAAWC,EAAI,EAAE,EACjBC,EAAYD,EAAI,EAAE,EAClBE,EAAoBF,EAAI,EAAE,EAE1BG,EAAiBC,EAAiB,IAC/BP,EAAS,UAAU,gBACtBK,EAAkB,OAASL,EAAS,UAAU,SAAS,WAAa,GACpEA,EAAS,UAAU,SACxB,EAEKQ,EAAiBD,EAAmB,IAAM,CAC1C,GAAAP,EAAS,UAAU,gBAAiB,CACtC,GAAIM,EAAe,OAASA,EAAe,QAAU,GAAI,CACvD,MAAMG,EAAKH,EAAe,MACnB,OAAAN,EAAS,UAAU,sBACvB,OAAO,CAAC,CAACU,EAAMC,CAAS,KACf,QAAA,IAAID,EAAMC,EAAWF,CAAE,EACxBE,IAAcF,EACtB,EACA,IAAI,CAAC,CAACC,CAAI,IAAMA,CAAI,CACzB,CACA,OAAOV,EAAS,UAAU,QAC5B,CACA,OAAOA,EAAS,UAAU,SAAA,CAC3B,EAED,OAAAY,EAAU,IAAM,CACVZ,EAAS,UAAU,gBAErBA,EAAS,UAAU,kBAAkB,CAAE,UAAWA,EAAS,UAAU,UAAW,GAIvE,CAACA,EAAS,UAAU,WAAaA,EAAS,UAAU,UAAU,SAAW,IAClFA,EAAS,UAAU,cACrB,CACD"}